<?php

/**
 * This is the model class for table "productocaracteristica".
 *
 * The followings are the available columns in table 'productocaracteristica':
 * @property string $valor
 * @property string $fecha
 * @property boolean $eliminado
 * @property string $usuario
 * @property integer $idcaracteristica
 * @property integer $idproducto
 * @property string $archivo
 *
 * The followings are the available model relations:
 * @property Producto $idproducto0
 * @property Caracteristica $idcaracteristica0
 */
class Productocaracteristica extends CActiveRecord {

    
    public $directorioImagen = 'protected/modules/almacen/images/productocaracteristica/';

    public function primaryKey() {
        //IMPORTANTE! en este orden se obtienen los ids en $keyvalue de 
        //la extension.
        return array('idproducto');
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'productocaracteristica';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('idcaracteristica, idproducto', 'numerical', 'integerOnly' => true),
            array('usuario', 'length', 'max' => 30),
            array('valor, eliminado, archivo', 'safe'),
//                                array('archivo', 'file', 'types'=>'jpg, gif, png'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('valor, fecha, eliminado, usuario, idcaracteristica, idproducto, archivo', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idproducto0' => array(self::BELONGS_TO, 'Producto', 'idproducto'),
            'idcaracteristica0' => array(self::BELONGS_TO, 'Caracteristica', 'idcaracteristica'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'valor' => 'Valor',
            'fecha' => 'Fecha',
            'eliminado' => 'Eliminado',
            'usuario' => 'Usuario',
            'idcaracteristica' => 'Idcaracteristica',
            'idproducto' => 'Idproducto',
            'archivo' => 'Archivo',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('valor', $this->valor, true);
        if ($this->fecha != Null) {
            $criteria->addCondition("fecha::date = '" . $this->fecha . "'");
        }
        $criteria->compare('eliminado', $this->eliminado);
        $criteria->compare('usuario', $this->usuario, true);
        $criteria->compare('idcaracteristica', $this->idcaracteristica);
        $criteria->compare('idproducto', $this->idproducto);
        $criteria->compare('archivo', $this->archivo, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Productocaracteristica the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->valor = strtoupper($this->valor);
        $this->fecha = new CDbExpression('NOW()');
        $this->usuario = Yii::app()->user->getName();
        return parent::beforeSave();
    }

    /**
     * Consultar características de un producto
     * @param integer id  Id del producto.
     * @param integer idgenero Id del genero al que pertenecen las características  
     * @return array() que continene las características de un producto
     */
    public function informacionProducto($id, $genero) {
        $caracteristica = Caracteristica::model()->tableName();
        $criteria = new CDbCriteria();
        $criteria->select = "t.valor,t.idcaracteristica,t.idproducto,CONCAT('uploads/',t.archivo)as archivo,ca.idgenero";
        $criteria->join = 'INNER JOIN ' . $caracteristica . ' ca ON ca.id = t.idcaracteristica';
        $criteria->compare('t.idproducto', $id);
        $criteria->compare('ca.idgenero', $genero);
        $informacion = $this->findAll($criteria);
        $dato = array();
        if (count($informacion) > 0) {
            foreach ($informacion as $i) {
                array_push($dato, $i->attributes);
            }
        }
        return $dato;
    }

    /**

      /**
     * 
     * Recorre y almacena valores de un array que contenga las caracteristicas
     * asignando a un producto específico
     * @param integer idProducto Id del producto al que pertenece
     * @param model modelo Modelo en el que se almacenaran los datos
     * @param array caracteristica Array con los valores
     */
    public function registrarGeneral($idProducto, $modelo, $caracteristica) {
        $retorno = true;
        if ($idProducto != Null && isset($modelo) && isset($caracteristica)) {
            $modelo->attributes = $caracteristica;
            $modelo->idproducto = $idProducto;
            $productoCaracteristica = $caracteristica;
            $cantidad = count($caracteristica);
            for ($i = 1; $i <= $cantidad; $i++) {
                foreach ($productoCaracteristica[$i] as $atributo => $dato) {
                    if ($atributo == 'idcaracteristica') {
                        $modelo->idcaracteristica = $dato;
                    }
                    if ($atributo == 'valor') {
                        if ($dato != Null) {
                            $modelo->valor = $dato;
                            if ($modelo->save()) {
                                $modelo = new Productocaracteristica;
                                $modelo->attributes = $caracteristica;
                                $modelo->idproducto = $idProducto;
                            } else {
                                $retorno = false;
                            }
                        }
                    }
                }
            }
        } else {
            $retorno = false;
        }
        return $retorno;
    }

    /**
     * 
     * Recorre y almacena valores de un array que contenga las rutas de imagenes
     * asignando a un producto específico
     * @param integer idProducto Id del producto al que pertenece
     * @param model modelo Modelo en el que se almacenaran los datos
     * @param array imagen Array con los valores
     * @param string directorioTemporal directorio temporal donde se encuentran 
     * las imagenes a subirse
     * @param string directorioDestino donde se copiaran las imagenes  
     */
    public function registrarImagen($idProducto, $modelo, $imagen, $directorioTemporal) {
        $retorno = true;
        if ($idProducto != Null && isset($modelo) && isset($imagen)) {
            $modelo->attributes = $imagen;
            $modelo->idproducto = $idProducto;
            $productoCaracteristica = $imagen;
            $cantidad = count($imagen);
            $directorioProductoCaracteristica = $this->directorioImagen . $idProducto;
            if (!file_exists($directorioProductoCaracteristica)) {
                mkdir($directorioProductoCaracteristica);
            }
            exec("rm " . $directorioProductoCaracteristica . "/*");
            if ($cantidad > 0) {
                for ($i = 1; $i <= $cantidad; $i++) {
                    foreach ($productoCaracteristica[$i] as $atributo => $dato) {
                        if ($atributo == 'idcaracteristica') {
                            $modelo->idcaracteristica = $dato;
                        }
                        if ($atributo == 'archivo') {
                            $ruta = explode("/", $dato);
                            if (count($ruta) > 1) {
                                $nombreArchivo = $ruta['1'];
                                if ($dato != Null) {
                                    $modelo->archivo = $nombreArchivo;
                                    if ($modelo->save()) {

                                        copy($directorioTemporal . '/' . $dato, $directorioProductoCaracteristica . '/' . $nombreArchivo);
                                        $modelo = new Productocaracteristica;
                                        $modelo->attributes = $imagen;
                                        $modelo->idproducto = $idProducto;
                                    } else {
                                        $retorno = false;
                                    }
                                }
                            }
                        }
                    }
                }
                exec("rm -rf " . escapeshellarg($directorioTemporal));
            }
        } else {
            $retorno = false;
        }
        return $retorno;
    }

    /**
     * 
     * Prepara las imagenes en un directorio temporal
     * @param integer idProducto Id del producto al que pertenece	 
     * @param string directorioTemporal directorio temporal donde se copiaran las imagenes          
     */
    public function prepararImagen($idProducto, $directorioTemporal) {
        $retorno = true;
        if ($idProducto != Null && $directorioTemporal != Null) {

            exec("cp -r " . $this->directorioImagen . "/" . $idProducto . "/* " . $directorioTemporal . "/uploads");

            return $retorno;
        }
    }

    /**
     * 
     * Copia las imagenes del directorio de un producto para los produsctos de subalmacenes
     * @param integer idProducto Id del producto 	 
     * @return boolean Exito o fracaso 	 
     */
    public function copiarImagenHijo($idProducto) {
        $retorno = true;

        if ($idProducto != Null) {
            $hijo = Producto::model()->getHijo($idProducto);
            $cantidad = count($hijo);
            if ($cantidad > 0) {

                foreach ($hijo as $atributo => $dato) {
                    if (!file_exists($this->directorioImagen . "/" . $dato['id'])) {
                        mkdir($this->directorioImagen . "/" . $dato['id']);
                    }
                    exec("rm " . escapeshellarg($this->directorioImagen . "/" . $dato['id'] . '/*'));
                    exec("cp -r " . $this->directorioImagen . "/" . $idProducto . "/* " . $this->directorioImagen . "/" . $dato['id']);
                    $retorno = true;
                }
            }
        } else {
            $retorno = false;
        }
        return $retorno;
    }

}
