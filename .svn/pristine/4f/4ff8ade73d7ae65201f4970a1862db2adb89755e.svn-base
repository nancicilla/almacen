<?php

/*
 * Notaborrador.php
 *
 * Version 0.$Rev$
 *
 * Creacion: 17/03/2015
 *
 * Ultima Actualizacion: $Date$:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 *
 * This is the model class for table "notaborrador".
 *
 * The followings are the available columns in table 'notaborrador':
 * @property integer $id
 * @property string $glosa
 * @property string $fecha
 * @property boolean $eliminado
 * @property string $usuario
 * @property integer $idtipo
 * @property integer $idorigen
 *
 * The followings are the available model relations:
 * @property Productonotaborrador[] $productonotaborradors
 */

class Notaborrador extends CActiveRecord {

    public $fechaInicio; //busqueda entre rangos
    public $fechaFin; //busqueda entre rangos
    public $idalmacenOrigen;
    public $idalmacenDestino;

    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'notaborrador';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('fecha', 'required', 'on' => array('insert', 'update')),
            array('idalmacenOrigen,idalmacenDestino', 'required', 'on' => array('traspaso')),
            array('fecha', 'type', 'type' => 'date', 'message' => 'Fecha no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium'), 'except' => array('anular')),
            array('idtipo, idorigen, idestado', 'numerical', 'integerOnly' => true),
            array('usuario', 'length', 'max' => 30),
            array('fechaFin', 'compareDateRange', 'type' => 'date', 'message' => 'Fecha fin no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium'), 'except' => array('anular')),
            array('fechaInicio', 'type', 'type' => 'date', 'message' => 'Fecha inicio no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium'), 'except' => array('anular')),
            array('fechaFin', 'type', 'type' => 'date', 'message' => 'Fecha fin no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium'), 'except' => array('anular')),
            array('fechaFin,fechaInicio', 'required', 'on' => 'checked'),
            array('glosa,eliminado,idalmacenOrigen,idalmacenDestino,total', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, glosa, fecha, eliminado, usuario, idtipo, idtipodocumento, '
                . 'fechaInicio,fechaFin,idorigen', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idtipo0' => array(self::BELONGS_TO, 'Tipo', 'idtipo'),
            'productonotaborradors' => array(self::HAS_MANY, 'Productonotaborrador', 'idnotaborrador'),
            'idorigen0' => array(self::BELONGS_TO, 'Origen', 'idorigen'),
            'idestado0' => array(self::BELONGS_TO, 'Estado', 'idestado'),
            'idtipodoc0' => array(self::BELONGS_TO, 'Tipodocumento', 'idtipodocumento'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'glosa' => 'Glosa',
            'fecha' => 'Fecha',
            'eliminado' => 'Eliminado',
            'usuario' => 'Usuario',
            'idtipo' => 'Movimiento',
            'idorigen' => 'Origen',
            'fechaInicio' => 'Fecha desde',
            'fechaFin' => 'Fecha hasta',
            'idalmacenOrigen' => 'Almacén Origen',
            'idalmacenDestino' => 'Almacén Destino',
            'idestado' => 'Estado',
            'idtipodocumento' => 'Documento',
            'numero' => 'Nº',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;
        $criteria->with = array('idtipodoc0');

        if ($this->validate()) {
            $criteria->compare('t.id', $this->id);
            $criteria->addSearchCondition('t.glosa', $this->glosa, true, 'AND', 'ILIKE');
            if ($this->fecha != Null) {
                $criteria->addCondition("t.fecha::date = '" . $this->fecha . "'");
            }
            $criteria->compare('t.eliminado', 0);
            $criteria->addSearchCondition('t.usuario', $this->usuario, true, 'AND', 'ILIKE');
            $criteria->compare('t.idtipo', $this->idtipo);
            $criteria->compare('t.idorigen', $this->idorigen);
            $criteria->compare('t.idestado', $this->idestado);
            $criteria->compare('t.idtipodocumento', $this->idtipodocumento);
            if ($this->fechaInicio != Null) {
                if ($this->fechaFin == Null) {
                    $this->fechaFin = new CDbExpression('NOW()');
                }

                $criteria->addCondition("t.fecha::date BETWEEN '$this->fechaInicio' AND '$this->fechaFin'");
            }
        } else {
            $criteria->compare('t.idorigen', -10);
        }
        Yii::app()->session['notaBorradorLote'] = $criteria;
        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.fecha desc',
                'attributes' => array(
                    'idtipodocumento' => array(
                        'asc' => 'idtipodoc0.nombre',
                        'desc' => 'idtipodoc0.nombre DESC',
                    ),
                    '*',
                ),
            ),
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Notaborrador the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        if ($this->scenario != "anular") {
            $this->glosa = strtoupper($this->glosa);
            $this->fecha = new CDbExpression('NOW()');

            if (isset(Yii::app()->session['var']))
                $this->usuario = Yii::app()->session['var'];
            else
                $this->usuario = Yii::app()->user->getName();
        }
        return parent::beforeSave();
    }

    /**
     *
     * Sirve para comparar un rango de fechas, verifica que la fecha posterior
     * sea mayor a la fecha inicial, de no ser asi, se añade un error
     * 
     */
    public function compareDateRange($attribute, $params) {
        if (!empty($this->fechaFin)) {
            if (strtotime($this->fechaFin) < strtotime($this->fechaInicio)) {
                $this->addError($attribute, 'Fecha fin no puede ser menor a la fecha de inicio.');
            }
        }
    }

    /**
     * Ejecuta la funcion que desencadena el proceso de confirmacion de 
     * diferencias de inventario 
     */
    public function confirmarNotaBorrador() {
        $command = Yii::app()->almacen->createCommand("select notaborrador_confirmar(" . $this->getPrimaryKey() . ",'" . Yii::app()->user->getName() . "');");
        return $command->queryScalar();
    }

    public function cambiaEstadoOrdenEnProceso() {
        //El estado de la orden de produccion deb estar en estado iniciado=2, 
        $orden = new SoapClient('http://127.0.0.1/coreT/produccion/WSOrden/obtenerUltimoEstadoOrden');
        $docid = $this->iddocumento;
        $estado = $orden->getUltimoEstadoOrden($docid); //<<<--- El estado debe ser 2=Iniciado

        /*$myfile = fopen("newfile1.txt", "w") or die("Unable to open file!");
        $txt = "errorestai :( " . $estado;
        fwrite($myfile, $txt);
        fclose($myfile);*/

        if ($estado = 2) {
            //La nota borrador generada; iddocumento=id de la orden,idtipo=2 salida, idorigen=4 produccion
            if ($this->idtipo = 2 && $this->idorigen = 4) {

                $usuario = Yii::app()->user->getName();
                $ordenEstado = new SoapClient('http://127.0.0.1/coreT/produccion/WSOrden/registrarNuevoEstadoOrden');
                $respuesta = $ordenEstado->nuevoEstadoOrden($docid, $usuario);


                if ($respuesta == 0) {
                    //no hubo ningun error
                } else {
                    //ocurrió algún error
                }
            }
        }
    }

    /**
     * Registra una nota borrador en el almacen
     * @param string $glosa
     * @param integer $tipo
     * @param integer $idOrigen
     * @param array[idproducto,cantidad] $producto
     * @return string
     */
    public function registrarNotaBorrador($glosa, $tipo, $idOrigen) {
        return 'Exito';
    }

    /**
     * Función que genera un numero de orden ya sea consecutivo
     * o que rellena los numeros faltantes
     * @return type
     */
    public function generarNumero() {
        return Yii::app()->almacen->createCommand("SELECT MAX(numero) "
                        . "FROM notaborrador where eliminado=false")->queryScalar() + 1;
    }

    /**
     * Esta función actualiza el precio unitario de OrdenRecetaProducto
     */
    public function actualizarPrecioUnitarioOrdenRecetaProducto() {
        //El estado de la orden de produccion deb estar en estado iniciado=2, 
        $orden = new SoapClient('http://127.0.0.1/coreT/produccion/WSOrden/actualizarPrecioUnitarioOrdenRecetaProducto');
        $docid=$this->iddocumento;
        $respuesta=$orden->updatePrecioUnitarioOrdenRecetaProducto($docid);        
        
    }
    /**
     * Función que se conecta a través de SOAP al módulo de compras para registrar
     * el id de nota confirmada de almacén a su orden de compra o a su orden de
     * importacion asociada
     * @param integer $idNota Id correspendiente a la nota de almacén
     * @param integer $idOrden Id de la orden corresponiente
     * @param boolean $importacion Indica si la orden es de importacion o no
     */
    public function registrarIdNotaOrden($idNota,$idOrden,$importacion) {        
        $orden = new SoapClient('http://127.0.0.1/coreT/compra/WSOrden/ordenRegistarId');
        $orden->registrarIdNota($idNota,$idOrden,$importacion);               
    }
    
    /*
     * Función que actualiza la tabla "ordenimportacion (campo = idnota)" de la bd compra
     */
    public function actualizarOrdenImportacion($idnotaborrador, $idNota) {
        $orden = new SoapClient('http://127.0.0.1/coreT/compra/WSOrden/ordenImportacionActualizar');
        $orden->ordenImportacionActualizar($idnotaborrador, $idNota);
    }
}
