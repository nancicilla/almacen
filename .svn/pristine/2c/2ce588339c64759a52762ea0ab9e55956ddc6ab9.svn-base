<?php
/*
 * Notaborrador.php
 *
 * Version 0.$Rev$
 *
 * Creacion: 17/03/2015
 *
 * Ultima Actualizacion: $Date$:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 *
 * This is the model class for table "notaborrador".
 *
 * The followings are the available columns in table 'notaborrador':
 * @property integer $id
 * @property string $glosa
 * @property string $fecha
 * @property boolean $eliminado
 * @property string $usuario
 * @property integer $idtipo
 * @property integer $idorigen
 *
 * The followings are the available model relations:
 * @property Productonotaborrador[] $productonotaborradors
 */
class Notaborrador extends CActiveRecord {

    public $fechaInicio; //busqueda entre rangos
    public $fechaFin; //busqueda entre rangos

    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */

    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'notaborrador';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('fecha', 'required', 'on' => array('insert', 'update')),
            array('fecha', 'type', 'type' => 'date', 'message' => 'Fecha no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium')),
            array('idtipo, idorigen', 'numerical', 'integerOnly' => true),
            array('usuario', 'length', 'max' => 30),
            array('fechaFin', 'compareDateRange', 'type' => 'date', 'message' => 'Fecha fin no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium')),
            array('fechaInicio', 'type', 'type' => 'date', 'message' => 'Fecha inicio no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium')),
            array('fechaFin', 'type', 'type' => 'date', 'message' => 'Fecha fin no es una fecha válida.', 'dateFormat' => Yii::app()->locale->getDateFormat('medium')),
            array('fechaFin,fechaInicio', 'required', 'on' => 'checked'),
            array('glosa, eliminado', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, glosa, fecha, eliminado, usuario, idtipo, '
                . 'fechaInicio,fechaFin,idorigen', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idtipo0' => array(self::BELONGS_TO, 'Tipo', 'idtipo'),
            'productonotaborradors' => array(self::HAS_MANY, 'Productonotaborrador', 'idnotaborrador'),
            'idorigen0' => array(self::BELONGS_TO, 'Origen', 'idorigen')
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'glosa' => 'Glosa',
            'fecha' => 'Fecha',
            'eliminado' => 'Eliminado',
            'usuario' => 'Usuario',
            'idtipo' => 'Tipo',
            'idorigen' => 'Origen',
            'fechaInicio' => 'Fecha desde',
            'fechaFin' => 'Fecha hasta',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;
        if ($this->validate()) {
            $criteria->compare('id', $this->id);
            $criteria->addSearchCondition('glosa', $this->glosa, true, 'AND', 'ILIKE');
            if ($this->fecha != Null) {
                $criteria->addCondition("fecha::date = '" . $this->fecha . "'");
            }
            $criteria->compare('t.eliminado', 0);
            $criteria->addSearchCondition('t.usuario', $this->usuario, true, 'AND', 'ILIKE');
            $criteria->compare('idtipo', $this->idtipo);
            $criteria->compare('idorigen', $this->idorigen);
            if ($this->fechaInicio != Null) {
                if ($this->fechaFin == Null) {
                    $this->fechaFin = new CDbExpression('NOW()');
                }

                $criteria->addCondition("t.fecha::date BETWEEN '$this->fechaInicio' AND '$this->fechaFin'");
            }
        } else {
            $criteria->compare('idorigen', -10);
        }
        Yii::app()->session['notaBorradorLote'] = $this->findAll($criteria);
        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.fecha desc',
            ),
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Notaborrador the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->glosa = strtoupper($this->glosa);
        $this->fecha = new CDbExpression('NOW()');
        $this->usuario = Yii::app()->user->getName();
        return parent::beforeSave();
    }

    /**
     *
     * Sirve para comparar un rango de fechas, verifica que la fecha posterior
     * sea mayor a la fecha inicial, de no ser asi, se añade un error
     * 
     */
    public function compareDateRange($attribute, $params) {
        if (!empty($this->fechaFin)) {
            if (strtotime($this->fechaFin) < strtotime($this->fechaInicio)) {
                $this->addError($attribute, 'Fecha fin no puede ser menor a la fecha de inicio.');
            }
        }
    }

    /**
     * Ejecuta la funcion que desencadena el proceso de confirmacion de 
     * diferencias de inventario 
     */
    public function confirmarNotaBorrador() {
        $command = Yii::app()->almacen->createCommand("select notaborrador_confirmar(" . $this->getPrimaryKey() . ",'" . Yii::app()->user->getName() . "');");
        return $command->queryScalar();
    }
    /**
     * Registra una nota borrador en el almacen
     * @param string $glosa
     * @param integer $tipo
     * @param integer $idOrigen
     * @param array[idproducto,cantidad] $producto
     * @return string
     */
    public function registrarNotaBorrador($glosa,$tipo,$idOrigen,$producto){
        return 'Exito';
    }

}
