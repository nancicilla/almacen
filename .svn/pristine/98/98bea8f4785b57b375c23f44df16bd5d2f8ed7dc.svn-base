<?php

/**
 * This is the model class for table "caracteristica".
 *
 * The followings are the available columns in table 'caracteristica':
 * @property integer $id
 * @property string $nombre
 * @property string $fecha
 * @property string $usuario
 * @property integer $idgenero
 *
 * The followings are the available model relations:
 * @property Genero $idgenero0
 * @property Productocaracteristica[] $productocaracteristicas
 */
class Caracteristica extends CActiveRecord {

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'caracteristica';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('nombre,idgenero', 'required', 'on' => array('insert', 'update')),
            array('nombre', 'unique', 'on' => array('insert', 'update')),
            array('idgenero', 'numerical', 'integerOnly' => true),
            array('nombre, usuario', 'length', 'max' => 30),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, nombre, fecha, usuario, idgenero', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idgenero0' => array(self::BELONGS_TO, 'Genero', 'idgenero'),
            'productocaracteristicas' => array(self::HAS_MANY, 'Productocaracteristica', 'idcaracteristica'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'nombre' => 'Nombre',
            'fecha' => 'Fecha',
            'usuario' => 'Usuario',
            'idgenero' => 'Tipo',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->addSearchCondition('t.nombre',$this->nombre,true,'AND','ILIKE'); 
        if ($this->fecha != Null) {
        $criteria->addCondition("fecha::date = '" . $this->fecha . "'");
        }
        $criteria->addSearchCondition('t.usuario',$this->usuario,true,'AND','ILIKE');
        $criteria->compare('idgenero', $this->idgenero);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.nombre asc',
            ),
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Caracteristica the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->fecha = new CDbExpression('NOW()');
        $this->usuario = Yii::app()->user->getName();
        return parent::beforeSave();
    }

    /**
     * Verifica si una caracteristica esta asociada a un producto
     * @return boolean respuesta
     */
    public function tieneProducto() {
        $resp=false;
        if($this->id!==Null){
            $resp= Productocaracteristica::model()->exists('idcaracteristica='.$this->id);
        }
        return $resp;
        }

    /**
     * Antes de borrar verificar que el almacen no tenga asociado productos, otros
     * almacenes o cuentas contables, en caso de no cumplir con las condiciones
     * se muestra una excepción y no se lleva a cabo la eliminación.
     */
    protected function beforeDelete() {
        if ($this->tieneProducto()) {
            throw new CrugeException('La característica no se puede eliminar, '
            . 'porque algunos productos la utilizan', 482);
        } else {
            return parent::beforeDelete();
        }
    }

    /**
     *
     * Antes de validar cambia el campo nombre a mayúsculas  
     * 
     */
    public function beforeValidate() {
        $this->nombre = strtoupper($this->nombre);
        return parent::beforeValidate();
    }

}
