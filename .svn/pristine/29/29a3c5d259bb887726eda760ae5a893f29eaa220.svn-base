<?php

/**
 * This is the model class for table "informacioncaracteristica".
 *
 * The followings are the available columns in table 'informacioncaracteristica':
 * @property integer $idcaracteristica
 * @property string $nombrecaracteristica
 * @property boolean $tienehijo
 * @property integer $idsubcaracteristica
 * @property string $nombresubcaracteristica
 * @property string $usuario
 * @property string $fecha
 */
class Informacioncaracteristica extends CActiveRecord {

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'informacioncaracteristica';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('idcaracteristica, idsubcaracteristica', 'numerical', 'integerOnly' => true),
            array('nombrecaracteristica', 'length', 'max' => 50),
            array('usuario', 'length', 'max' => 30),
            array('tienehijo, nombresubcaracteristica, fecha', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('idcaracteristica, nombrecaracteristica, tienehijo, idsubcaracteristica, nombresubcaracteristica, usuario, fecha', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'idcaracteristica' => 'Idcaracteristica',
            'nombrecaracteristica' => 'Nombrecaracteristica',
            'tienehijo' => 'Tienehijo',
            'idsubcaracteristica' => 'Idsubcaracteristica',
            'nombresubcaracteristica' => 'Nombresubcaracteristica',
            'usuario' => 'Usuario',
            'fecha' => 'Fecha',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('t.idcaracteristica', $this->idcaracteristica);
        $criteria->addSearchCondition('t.nombrecaracteristica', $this->nombrecaracteristica, true, 'AND', 'ILIKE');
        $criteria->compare('t.tienehijo', $this->tienehijo);
        $criteria->compare('t.idsubcaracteristica', $this->idsubcaracteristica);
        $criteria->addSearchCondition('t.nombresubcaracteristica', $this->nombresubcaracteristica, true, 'AND', 'ILIKE');
        $criteria->addSearchCondition('t.usuario', $this->usuario, true, 'AND', 'ILIKE');
        if ($this->fecha != Null) {
            $criteria->addCondition("t.fecha::date = '" . $this->fecha . "'");
        }

        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Informacioncaracteristica the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->nombrecaracteristica = strtoupper($this->nombrecaracteristica);
        $this->nombresubcaracteristica = strtoupper($this->nombresubcaracteristica);
        $this->usuario = Yii::app()->user->getName();
        $this->fecha = new CDbExpression('NOW()');
        return parent::beforeSave();
    }

    /**
     * 
     * @param string $nombre  Caracteres a comparar
     * @return \CActiveDataProvider Con el detalle de características generales
     * padre
     */
    public function caracteristicaGeneralPadre($nombre = '') {
        $criteria = new CDbCriteria;
        $criteria->addCondition('idsubcaracteristica is null');
        $criteria->order = 't.nombrecaracteristica';
        $criteria->addSearchCondition('t.nombrecaracteristica', $nombre, true, 'AND', 'ILIKE');
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * 
     * @param string $nombre Caracteres a comparar
     * @param integer $idcaracteristica Característica general padre
     * @return \CActiveDataProvider
     */
    public function caracteristicaGeneralHijo($nombre = '', $idcaracteristica) {
        $criteria = new CDbCriteria;
        $criteria->addCondition('idsubcaracteristica IS NOT NULL');
        $criteria->compare('t.idcaracteristica', $idcaracteristica);
        $criteria->order = 't.nombresubcaracteristica';
        $criteria->addSearchCondition('t.nombresubcaracteristica', $nombre, true, 'AND', 'ILIKE');
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

}
