<?php
/*
 * NotaborradorController.php
 *
 * Version 0.$Rev$
 *
 * Creacion: 17/03/2015
 *
 * Ultima Actualizacion: $Date$:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 */
class NotaborradorController extends Controller {
    /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */

    /*
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */

    public function filters() {
        return array_merge(
                array(
                    'accessControl',
                    array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
                )
        );
    }

    /*
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */

    private function _publicActionsList() {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',
        );
    }

    public function accessRules() {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate() {
        $model = new Notaborrador;

        if (isset($_POST['Notaborrador'])) {
            $model->attributes = $_POST['Notaborrador'];
            if ($model->save())
                $this->redirect(array('view', 'id' => SeguridadModule::enc($model->id)));
        }

        $this->render('create', array(
            'model' => $model,
        ));
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        $model = $this->loadModel(SeguridadModule::dec($id));

        if (isset($_POST['Notaborrador'])) {
            $model->attributes = $_POST['Notaborrador'];
            if ($model->save())
                $this->redirect(array('view', 'id' => SeguridadModule::enc($model->id)));
        }

        $this->render('update', array(
            'model' => $model,
        ));
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        $this->loadModel(SeguridadModule::dec($id))->safeDelete();
        self::actionAdmin();
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Notaborrador('search');
        $model->unsetAttributes();  // clear any default values

        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Notaborrador'])) {
            $model->attributes = $_GET['Notaborrador'];
            if (!$model->validate()) {
                echo System::hasErrorSearch($model);
                return;
            }
        }

        $this->renderPartial('admin', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Notaborrador the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        $model = Notaborrador::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param Notaborrador $model the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'notaborrador-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    /**
     * Genera el reporte en formato pdf de las notas de  movimientos de 
     * productos, en caso de contener paginas se muestra una excepción
     */
    public function actionReporteNotaBorrador($id) {
        $re = new JasperReport('/reports/Almacen/notaBorrador', JasperReport::FORMAT_PDF, array(
            'pId' => SeguridadModule::dec($id),
            'pUsuario' => Yii::app()->user->getName(),
            'pFormatoNumero' => Yii::app()->params['formatNumberAlm'],
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));

        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Confirma las nota borrador y genera las notas de ingreso
     * y salida correspondientes, y el comprobante integrado
     * @param integer $id el id de la nota borrador a confirmarse
     */
    public function actionConfirmar($id) {
        $aux = $this->loadModel(SeguridadModule::dec($id))->confirmarNotaBorrador();
        if ($aux !== 'exito') {
            echo $aux;
        }
    }

    /**
     * Genera el reporte en formato pdf de las notas de borrador en lote
     */
    public function actionReporteNotaBorradorLote() {
        $re = new JasperReport('/reports/Almacen/notaBorradorLote', JasperReport::FORMAT_PDF, array(
            'pIds' => SWUtil::aRtoArrayReport( Notaborrador::model()->findAll(Yii::app()->session['notaBorradorLote']), 'id'),
            'pUsuario' => Yii::app()->user->getName(),
            'pFormatoNumero' => Yii::app()->params['formatNumberAlm'],
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));

        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }
    
    /**
     * Registra un traspaso entre almacenes
     */
    public function actionRegistrarTraspaso() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Notaborrador;
        $productonotaborrador = array();
        $isValidacionExitosa = true;
        $mensajeExito = "Creación exitosa!";
        $mensajeError = "Error al crear! ";

        if (isset($_POST['Notaborrador'])) {
            if (isset($_POST['Productonotaborrador'])) {
                $productonotaborrador = $_POST['Productonotaborrador'];
                $productonotaborradorDestino= array();
                $model->attributes = $_POST['Notaborrador'];
                $model->numero = $model->generarNumero();
                $nombreAlmOrigen= Almacen::model()->findByPk($_POST['Notaborrador']['idalmacenOrigen'])->nombre;
                $nombreAlmDestino= Almacen::model()->findByPk($_POST['Notaborrador']['idalmacenDestino'])->nombre;
                $glosa='TRASPASO DE '.$nombreAlmOrigen.' a '.$nombreAlmDestino.'- NOTA Nº '.$model->numero;
           $first_names = array_column($_POST['Productonotaborrador'], 'idproducto');
print_r($first_names);
echo implode(",",$first_names);

//                if ($model->validate()) {
//                    if ($model->save()) {
////                        $ingreso = Tipo::model()->findByPK($model->idtipo)->ingreso;
//                         $ingreso = true;
//                         Productonotaborrador::model()->registrarProductoNota($model->id, $productonotaborrador, $ingreso, $glosa);
//                    } else {
//                        echo System::hasErrors($mensajeError, $model);
//                        return;
//                    }
//                } else {
//                    $isValidacionExitosa = false;
//                }
            } else {
                $isValidacionExitosa = false;
                $mensajeError = 'Debe seleccionar por lo menos un producto! ';
            }
            if ($isValidacionExitosa) {
                echo System::dataReturn($mensajeExito, array('id' => SeguridadModule::enc($model->id)));
            } else {
                echo System::hasErrors($mensajeError, $model);
            }
            return;
        }

        $this->renderPartial('traspaso', array(
            'model' => $model,
            'productonotaborrador' => $productonotaborrador,
                ), false, true);
    }

}
