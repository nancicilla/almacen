<?php
/*
 * Controlseguimiento.php
 *
 * Version 0.$Rev: 244 $
 *
 * Creacion: 15/06/2015
 *
 * Ultima Actualizacion: $Date: 2015-03-17 10:26:19 -0400 (mar, 17 mar 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 
 * This is the model class for table "controlseguimiento".
 *
 * The followings are the available columns in table 'controlseguimiento':
 * @property integer $id
 * @property string $comunicacion
 * @property string $descripcion
 * @property integer $numero
 * @property string $tabla
 * @property integer $idtabla
 * @property string $fecha
 * @property boolean $eliminado
 * @property string $usuario
 */
class Controlseguimiento extends CActiveRecord
{
    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
            return 'controlseguimiento';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
            // NOTE: you should only define rules for those attributes that
            // will receive user inputs.
            return array(
                    array('id, numero, idtabla', 'numerical', 'integerOnly'=>true),
                    array('comunicacion', 'length', 'max'=>50),
                    array('tabla', 'length', 'max'=>20),
                    array('usuario', 'length', 'max'=>30),
                    array('descripcion, fecha, eliminado', 'safe'),
                    // The following rule is used by search().
                    // @todo Please remove those attributes that should not be searched.
                    array('id, comunicacion, descripcion, numero, tabla, idtabla, fecha, usuario', 'safe', 'on' => 'search'),
            );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idseguimiento0' => array(self::BELONGS_TO, 'Seguimiento', 'id'),
        );
    }

   /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'comunicacion' => 'Comunicación',
            'descripcion' => 'Descripción',
            'numero' => 'Nº',
            'tabla' => 'Tabla',
            'idtabla' => 'Idtabla',
            'fecha' => 'Fecha',
            'usuario' => 'Usuario'
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;
        
        $criteria->compare('t.numero', $this->numero);
        if ($this->comunicacion != Null) {
            $criteria->addCondition("t.comunicacion ilike '%" . $this->comunicacion . "%'");
        }
        if ($this->descripcion != Null) {
            $criteria->addCondition("t.descripcion ilike '%" . $this->descripcion . "%'");
        }
        if ($this->tabla != Null) {
            $criteria->addCondition("t.tabla ilike '%" . $this->tabla . "%'");
        }
        if ($this->fecha != Null) {
            $criteria->addCondition("t.fecha::date = '" . $this->fecha . "'");
        }
        $criteria->addSearchCondition('t.usuario', $this->usuario, true, 'AND', 'ILIKE');

        Yii::app()->session['reporteSeguimiento'] = $criteria;

        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.fecha desc'
            )
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection()
    {
            return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Controlseguimiento the static model class
     */
    public static function model($className=__CLASS__)
    {
            return parent::model($className);
    }


    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
		$this->comunicacion=strtoupper($this->comunicacion);
		$this->descripcion=strtoupper($this->descripcion);
		$this->tabla=strtoupper($this->tabla);
		$this->fecha= new CDbExpression('NOW()');
		$this->usuario= Yii::app()->user->getName();
        return parent::beforeSave();            
    }

    /**
     * Funcion que retorna el id del modelo
     * @return string
     */
    public function primaryKey() {
        return 'id';
    }

}
