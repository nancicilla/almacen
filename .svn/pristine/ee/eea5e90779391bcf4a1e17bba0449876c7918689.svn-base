<?php

/**
 * This is the model class for table "unidad".
 *
 * The followings are the available columns in table 'unidad':
 * @property integer $id
 * @property string $nombre
 * @property string $simbolo
 * @property string $fecha
 * @property string $usuario
 *
 * The followings are the available model relations:
 * @property Producto[] $productos
 */
class Unidad extends CActiveRecord {

    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'unidad';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('simbolo, nombre', 'unique', 'on' => array('insert', 'update')),
            array('simbolo, nombre', 'required', 'on' => array('insert', 'update')),
            array('nombre, usuario', 'length', 'max' => 30),
            array('simbolo', 'length', 'max' => 5),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, nombre, simbolo, fecha, usuario', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'productos' => array(self::HAS_MANY, 'Producto', 'idunidad'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'nombre' => 'Nombre',
            'simbolo' => 'Simbolo',
            'fecha' => 'Fecha',
            'usuario' => 'Usuario',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('t.eliminado', 0);

        $criteria->addSearchCondition('t.nombre', $this->nombre, true, 'AND', 'ILIKE');
        $criteria->addSearchCondition('t.simbolo', $this->simbolo, true, 'AND', 'ILIKE');
        if ($this->fecha != Null) {
            $criteria->addCondition("fecha::date = '" . $this->fecha . "'");
        }
        $criteria->addSearchCondition('t.usuario', $this->usuario, true, 'AND', 'ILIKE');
        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.nombre asc'
            )
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Unidad the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->nombre = strtoupper($this->nombre);
        $this->fecha = new CDbExpression('NOW()');
        $this->usuario = Yii::app()->user->getName();
        return parent::beforeSave();
    }

    /**
     * Sentencias entes de ejecutar validacion
     * @return CActiveRecord con la tupla a validarse
     */
    protected function beforeValidate() {
        $this->nombre = strtoupper($this->nombre);
        return parent::beforeValidate();
    }

    /**
     * Verifica si una unidad es utilizada por algún producto
     * @return 0 o 1 si existe o no
     */
    public function tieneProducto() {
        $retorno = 0;

        if ($this->id != "") {
            $retorno = Producto::model()->exists('idunidad=' . $this->id);
        }
        return $retorno;
    }

    /**
     * Sentencias entes de ejecutar metodo delete
     * @return CActiveRecord con la tupla a eliminarse
     */
    protected function beforeSafeDelete() {
        if ($this->tieneProducto()) {
            echo System::messageError('La unidad no puede ser eliminada,'
                    . ' productos dependen de ella.');
            return;
        } else {
            return parent::beforeSafeDelete();
        }
    }

}
