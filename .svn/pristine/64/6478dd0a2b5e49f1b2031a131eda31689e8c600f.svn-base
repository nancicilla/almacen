<?php

/*
 * AlmacenController.php
 *
 * Version 0.$Rev$
 *
 * Creacion: 17/03/2015
 *
 * Ultima Actualizacion: $Date$:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 */

class AlmacenController extends Controller {
    /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */

    /*
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */

    public function filters() {
        return array_merge(
                array(
                    'accessControl',
                    array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
                )
        );
    }

    /*
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */

    private function _publicActionsList() {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',
        );
    }

    public function accessRules() {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        $this->loadModel(SeguridadModule::dec($id))->safeDelete();
        self::actionAdmin();
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Almacen('search');
        $model->unsetAttributes();  // clear any default values


        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Almacen'])) {
            $model->attributes = $_GET['Almacen'];
            if (!$model->validate()) {
                echo System::hasErrorSearch($model);
                return;
            }
        }
        $this->renderPartial('admin', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Almacen the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        $model = Almacen::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param Almacen $model the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'almacen-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Almacen;

        if (isset($_POST['Almacen'])) {
            $model->attributes = $_POST['Almacen'];
            if ($model->save()) {
                if ($model->idalmacen !== null) {
                    $model->heredarProductoAlmacenPadre($model->id);
                }
                echo System::dataReturn('Creación exitosa!', array('id' => SeguridadModule::enc($model->id)));
                return;
            } else {
                echo System::hasErrors('Revise los datos! ', $model);
                return;
            }
        }

        $this->renderPartial('create', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = $this->loadModel(SeguridadModule::dec($id));

        if (isset($_POST['Almacen'])) {
            $model->attributes = $_POST['Almacen'];
            if ($model->save()) {
                echo System::dataReturn('', array('id' => SeguridadModule::enc($model->id)));
                return;
            } else {
                echo System::hasErrors('Revise los datos! ', $model);
                return;
            }
        }
        $this->renderPartial('update', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Devuelve la lista de caracteristicas padre
     */
    public function actionAlmacenPadre() {
        $resp = Almacen::model()->findAll(array('order' => 'nombre', 'condition' => "idalmacen ISNULL"));
        header("Content-type: application/json");
        echo CJSON::encode($resp);
    }

    /**
     * Genera el reporte de libro mayor de almacenes 
     * en caso de que el reporte no tenga paginas se muestra una excepción
     */
    public function actionReporteLibroMayor() {

        if (isset($_GET['Almacen']) && $_GET['Almacen']['idproducto'] !== '-1') {
            $fechaInicio = $_GET['Almacen']['fechaInicio'];
            $fechaFin = $_GET['Almacen']['fechaFin'];
            $idAlmacens = $_GET['Almacen']['id'];
            if ($idAlmacens === '') {
                $idAlmacens = SWUtil::aRtoArrayReport(Almacen::model()->findAll(array('order' => 'nombre')), 'id');
            } else {
                $idAlmacens = '{' . SeguridadModule::dec($idAlmacens) . '}';
            }
            if ($fechaInicio === '') {
                $fechaInicio = Gestion::getFechaInicioGestion();
            }
            if ($fechaFin === '') {
                if (strtotime(date("d-m-Y")) > strtotime(Gestion::getFechaFinGestion())) {
                    $fechaFin = Gestion::getFechaFinGestion();
                } else {
                    $fechaFin = date('Y-m-d');
                }
            }
            $re = new JasperReport('/reports/Almacen/libroMayorAlmacen', JasperReport::FORMAT_PDF, array(
                'pIdAlmacen' => $idAlmacens,
                'pIdProducto' => $_GET['Almacen']['idproducto'],
                'pUsuario' => Yii::app()->user->getName(),
                'pFechaInicio' => Yii::app()->format->date(strtotime($fechaInicio)),
                'pFechaFin' => Yii::app()->format->date(strtotime($fechaFin)),
            ));

            $re->exec();

            if ($re->getPages() > 0) {
                echo $re->toPDF();
            } else {
                throw new CrugeException('El reporte no tiene páginas.', 483);
            }
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }
    
    /**
     * Genera el reporte de salidas de almacen 
     * en caso de que el reporte no tenga paginas se muestra una excepción
     */
    public function actionReporteSalidasAlmacen() {
        if (isset($_GET['Almacen']) && $_GET['Almacen']['idproducto'] !== '-1') {
            $fechaInicio = $_GET['Almacen']['fechaInicio'];
            $fechaFin = $_GET['Almacen']['fechaFin'];
            $idAlmacens = $_GET['Almacen']['id'];
            if ($idAlmacens === '') {
                $idAlmacens = SWUtil::aRtoArrayReport(Almacen::model()->findAll(array('order' => 'nombre')), 'id');
            } else {
                $idAlmacens = '{' . SeguridadModule::dec($idAlmacens) . '}';
            }
            if ($fechaInicio === '') {
                $fechaInicio = Gestion::getFechaInicioGestion();
            }
            if ($fechaFin === '') {
                if (strtotime(date("d-m-Y")) > strtotime(Gestion::getFechaFinGestion())) {
                    $fechaFin = Gestion::getFechaFinGestion();
                } else {
                    $fechaFin = date('Y-m-d');
                }
            }
            $re = new JasperReport('/reports/Almacen/reporteSalidasAlmacen', JasperReport::FORMAT_PDF, array(
                'pIdAlmacen' => $idAlmacens,
                'pIdProducto' => $_GET['Almacen']['idproducto'],
                'pUsuario' => Yii::app()->user->getName(),
                'pFechaInicio' => Yii::app()->format->date(strtotime($fechaInicio)),
                'pFechaFin' => Yii::app()->format->date(strtotime($fechaFin)),
            ));

            $re->exec();

            if ($re->getPages() > 0) {
                echo $re->toPDF();
            } else {
                throw new CrugeException('El reporte no tiene páginasasdfadf.', 483);
            }
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Despliega la ventana de generacion de libro mayor de almacen.
     */
    public function actionGenerarLibroMayor() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Almacen;

        $this->renderPartial('libroMayor', array(
            'model' => $model,
                ), false, true);
    }
    
    public function actionGenerarSalidasAlmacen() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);
        $model = new Almacen;
        $this->renderPartial('salidasAlmacen', array(
            'model' => $model,
        ), false, true);
    }

    /**
     * Despliega la ventana de generacion de resumen mayor de almacen.
     */
    public function actionGenerarResumenMayor() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Almacen;

        $this->renderPartial('resumenMayor', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Genera el reporte de resumen mayor de almacenes 
     * en caso de que el reporte no tenga paginas se muestra una excepción
     */
    public function actionReporteResumenMayor() {

        if (isset($_GET['Almacen'])) {
            $fechaFin = $_GET['Almacen']['fechaFin'];

            $fechaInicio = Gestion::getFechaInicioGestion();

            if ($fechaFin === '') {
                if (strtotime(date("d-m-Y")) > strtotime(Gestion::getFechaFinGestion())) {
                    $fechaFin = Gestion::getFechaFinGestion();
                } else {
                    $fechaFin = date('Y-m-d');
                }
            }
            $re = new JasperReport('/reports/Almacen/resumenMayorAlmacenes', JasperReport::FORMAT_PDF, array(
                'pUsuario' => Yii::app()->user->getName(),
                'pFormatoNumero' => Yii::app()->params['formatNumberContabilidad'],
                'pFechaInicio' => Yii::app()->format->date(strtotime($fechaInicio)),
                'pFechaFin' => Yii::app()->format->date(strtotime($fechaFin)),
            ));

            $re->exec();

            if ($re->getPages() > 0) {
                echo $re->toPDF();
            } else {
                throw new CrugeException('El repodrte no tiene páginas.', 483);
            }
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Devuelve la lista de almacenes destino disponibles
     */
    public function actionFiltrarAlmacenDestino($idAlmacenOrigen) {
        $sql = 'select * from almacen where idalmacen=' . $idAlmacenOrigen . ' '
                . 'and eliminado=false '
                . 'union select * from almacen where idalmacen=' 
                . $idAlmacenOrigen . ' and eliminado=false 
                union select * from almacen where idalmacen=
                    (select idalmacen from almacen where id=' . $idAlmacenOrigen . ') 
                        and eliminado=false and id<>' . $idAlmacenOrigen . '
                    union select * from almacen where id=(select idalmacen 
                    from almacen where id=' . $idAlmacenOrigen . ') and eliminado=false';
        $resultado = Almacen::model()->findAllBySql($sql);
        header("Content-type: application/json");
        echo CJSON::encode($resultado);
    }
    
    /**
     * Despliega la ventana de generacion de resumen de compras
     */
    public function actionGenerarResumenCompras() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Almacen;

        $this->renderPartial('resumenCompras', array(
            'model' => $model,
                ), false, true);
    }
    
    /**
     * Genera el reporte de resumen de compras
     * en caso de que el reporte no tenga paginas se muestra una excepción
     */
    public function actionReporteResumenCompras() {

        if (isset($_GET['Almacen'])) {
            
            $fechaInicio = $_GET['Almacen']['fechaInicio'];
            $fechaFin = $_GET['Almacen']['fechaFin'];
            $idAlmacens = $_GET['Almacen']['id'];
            if ($idAlmacens !== '') {            
                $idAlmacens = SeguridadModule::dec($idAlmacens);
            }
            if ($fechaInicio === '') {
                $fechaInicio = Gestion::getFechaInicioGestion();
            }
            if ($fechaFin === '') {
                if (strtotime(date("d-m-Y")) > strtotime(Gestion::getFechaFinGestion())) {
                    $fechaFin = Gestion::getFechaFinGestion();
                } else {
                    $fechaFin = date('Y-m-d');
                }
            }
            $re = new JasperReport('/reports/Almacen/resumenCompras', JasperReport::FORMAT_PDF, array(
                'pIdAlmacen' => $idAlmacens,
                'pUsuario' => Yii::app()->user->getName(),
                'pFormatoNumero' => Yii::app()->params['formatNumberContabilidad'],
                'pFechaInicio' => Yii::app()->format->date(strtotime($fechaInicio)),
                'pFechaFin' => Yii::app()->format->date(strtotime($fechaFin)),
            ));
            $re->exec();

            if ($re->getPages() > 0) {
                echo $re->toPDF();
            } else {
                throw new CrugeException('El reporte no tiene páginas.', 483);
            }
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }
    
    /**
     * Despliega la ventana de generacion de comprobante contable
     */
    public function actionGenerarComprobanteContable() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Almacen;

        $this->renderPartial('comprobanteContable', array(
            'model' => $model,
                ), false, true);
    }
    
    /**
     * Genera el reporte de comprobante contable
     * en caso de que el reporte no tenga paginas se muestra una excepción
     */
    public function actionReporteComprobanteContable() {
        if (isset($_GET['Almacen'])) {
            $idAlmacens = $_GET['Almacen']['id'];
            if ($idAlmacens === '') {
                $idAlmacens = SWUtil::aRtoArrayReport(Almacen::model()->findAll(array('order' => 'nombre')), 'id');
            } else {
                $idAlmacens = '{' . SeguridadModule::dec($idAlmacens) . '}';
            }
            
            $idOrigen = $_GET['Almacen']['origen'];
            if ($idOrigen === '') {
                $idOrigen = SWUtil::aRtoArrayReport(Origen::model()->findAll(array('order' => 'nombre')), 'id');
            } else {
                $idOrigen = '{' .$idOrigen. '}';
            }
            
            $fechaInicio = $_GET['Almacen']['fechaInicio'];
            $fechaFin = $_GET['Almacen']['fechaFin'];

            if ($fechaInicio === '') {
                $fechaInicio = Gestion::getFechaInicioGestion();
            }
            if ($fechaFin === '') {
                if (strtotime(date("d-m-Y")) > strtotime(Gestion::getFechaFinGestion())) {
                    $fechaFin = Gestion::getFechaFinGestion();
                } else {
                    $fechaFin = date('Y-m-d');
                }
            }
            if ($_GET['Almacen']['detalle'] == 0) {
                $re = new JasperReport('/reports/Almacen/comprobanteContable', JasperReport::FORMAT_PDF, array(
                    'pIdAlmacen' => $idAlmacens,
                    'pIdOrigen' => $idOrigen,
                    'pUsuario' => Yii::app()->user->getName(),
                    'pFormatoNumero' => Yii::app()->params['formatNumberContabilidad'],
                    'pFechaInicio' => Yii::app()->format->date(strtotime($fechaInicio)),
                    'pFechaFin' => Yii::app()->format->date(strtotime($fechaFin)),
                ));
            } else {
                $re = new JasperReport('/reports/Almacen/movimientoAlmacenXCuenta', JasperReport::FORMAT_PDF, array(
                    'pIdAlmacen' => $idAlmacens, 
                    'pIdOrigen' => $idOrigen,
                    'pIdContracuenta' => $_GET['Almacen']['idcuenta'],                    
                    'pUsuario' => Yii::app()->user->getName(),
                    'pFormatoNumero' => Yii::app()->params['formatNumberContabilidad'],
                    'pFechaInicio' => Yii::app()->format->date(strtotime($fechaInicio)),
                    'pFechaFin' => Yii::app()->format->date(strtotime($fechaFin)),
                ));
            }
            $re->exec();

            if ($re->getPages() > 0) {
                echo $re->toPDF();
            } else {
                throw new CrugeException('El reporte no tiene páginas.', 483);
            }
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }
    
    public function actionFormDiferenciasAlmacen() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);
        
        $model = new Almacen;
        
        $this->renderPartial('formdiferenciasalm', array(
            'model' => $model,
        ), false, true);
    }
    
    public function actionGenerarExcelDiferenciasAlmacen() {
        ini_set('memory_limit', '-1');
        spl_autoload_unregister(array('YiiBase', 'autoload'));
        Yii::import('ext.PHPExcel.Classes.PHPExcel', true);
        spl_autoload_register(array('YiiBase', 'autoload'));
        $objPHPExcel = new PHPExcel();
        $fechaFin = isset($_GET['fechafin']) ? $_GET['fechafin'] : '';
        if ($fechaFin == '') {
            echo System::hasErrors('Seleccione una fecha límite');
            return;
        }
        $objPHPExcel->getProperties()->setCreator("SOLUR SRL")
                ->setLastModifiedBy("SOLUR SRL")
                ->setTitle("Diferencias de almacenes")
                ->setSubject("Diferencias de almacenes")
                ->setDescription("Diferencias de almacenes coreT e Integrado")
                ->setKeywords("Dif coreT Integrado")
                ->setCategory("ALMACENES");

        // ----- Cabecera del documento
        $activeSheet = $objPHPExcel->setActiveSheetIndex(0);
        $inf = 1;
        $activeSheet->setCellValue('E' . ($inf), "CORET");
        $activeSheet->setCellValue('G' . ($inf), "INTEGRADO");
        $activeSheet->mergeCells('E' . ($inf) . ':'. 'F' . ($inf));
        $activeSheet->mergeCells('G' . ($inf) . ':'. 'H' . ($inf));
        $activeSheet->getStyle("E" . $inf . ":" . "H" . $inf)->applyFromArray(
            array(
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN,
                        'color' => array('rgb' => '000000')
                    ),
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );
        $inf = 2;
        $activeSheet->getRowDimension($inf)->setRowHeight(55);
        //columnas coreT
        $activeSheet->setCellValue('A' . ($inf), "ID");
        $activeSheet->setCellValue('B' . ($inf), "ALMACEN");
        $activeSheet->setCellValue('C' . ($inf), "CODIGO");
        $activeSheet->setCellValue('D' . ($inf), "PRODUCTO");
        $activeSheet->setCellValue('E' . ($inf), "SALDO CANTIDAD");
        $activeSheet->setCellValue('F' . ($inf), "SALDO IMPORTE");
        $activeSheet->setCellValue('G' . ($inf), "SALDO CANTIDAD INTEGRADO");
        $activeSheet->setCellValue('H' . ($inf), "SALDO IMPORTE INTEGRADO");
        $activeSheet->setCellValue('I' . ($inf), "DIFERENCIA CANT");
        $activeSheet->setCellValue('J' . ($inf), "DIFERENCIA IMP");
        $activeSheet->setCellValue('K' . ($inf), "OBSERVACIÓN");
        $activeSheet->setCellValue('L' . ($inf), "PRECIO");
        //ancho de las columnas
        $activeSheet->getColumnDimension('A')->setWidth(8);
        $activeSheet->getColumnDimension('B')->setWidth(20);
        $activeSheet->getColumnDimension('C')->setWidth(15);
        $activeSheet->getColumnDimension('D')->setWidth(35);
        $activeSheet->getColumnDimension('E')->setWidth(12);
        $activeSheet->getColumnDimension('F')->setWidth(12);
        $activeSheet->getColumnDimension('G')->setWidth(12);
        $activeSheet->getColumnDimension('H')->setWidth(12);
        $activeSheet->getColumnDimension('I')->setWidth(12);
        $activeSheet->getColumnDimension('J')->setWidth(12);
        $activeSheet->getColumnDimension('K')->setWidth(35);
        $activeSheet->getColumnDimension('l')->setWidth(12);

        
        $activeSheet->getStyle("A" . $inf . ":" . "K" . $inf)->applyFromArray(
            array(
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN,
                        'color' => array('rgb' => '000000')
                    ),
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );
        $activeSheet->getStyle("A" . $inf . ":" . "L" . $inf)->getAlignment()->setWrapText(true);
        //obtenemos la informacion para el excel
        $datosIntegrado = Productonota::model()->obtenerDiferenciasIntegrado($fechaFin);
        $inf = 3;
        $filasIntegrado = count($datosIntegrado);
        for ($i = 0; $i < $filasIntegrado; $i++, $inf++) {
            $activeSheet->setCellValue('A' . $inf, $datosIntegrado[$i]['id']);
            $activeSheet->setCellValue('B' . $inf, $datosIntegrado[$i]['almacen']);
            $activeSheet->setCellValue('C' . $inf, $datosIntegrado[$i]['codigo']);
            $activeSheet->setCellValue('D' . $inf, $datosIntegrado[$i]['producto']);
            $activeSheet->setCellValue('E' . $inf, $datosIntegrado[$i]['saldocantidad']);
            $activeSheet->setCellValue('F' . $inf, $datosIntegrado[$i]['saldoimporte']);
            $activeSheet->setCellValue('G' . $inf, $datosIntegrado[$i]['saldocantidadintegrado']);
            $activeSheet->setCellValue('H' . $inf, $datosIntegrado[$i]['saldoimporteintegrado']);
            $activeSheet->setCellValue('I' . $inf, $datosIntegrado[$i]['saldocantidad']-$datosIntegrado[$i]['saldocantidadintegrado']);
            $activeSheet->setCellValue('J' . $inf, $datosIntegrado[$i]['saldoimporte']-$datosIntegrado[$i]['saldoimporteintegrado']);
            $activeSheet->setCellValue('K' . $inf, $datosIntegrado[$i]['observacion']);
            $activeSheet->setCellValue('L' . $inf, $datosIntegrado[$i]['precio']);
            $objPHPExcel->getActiveSheet()->getStyle('E' . $inf)->getNumberFormat()->setFormatCode('#,##0.0000');
            $objPHPExcel->getActiveSheet()->getStyle('F' . $inf)->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle('G' . $inf)->getNumberFormat()->setFormatCode('#,##0.0000');
            $objPHPExcel->getActiveSheet()->getStyle('H' . $inf)->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle('I' . $inf)->getNumberFormat()->setFormatCode('#,##0.0000');
            $objPHPExcel->getActiveSheet()->getStyle('J' . $inf)->getNumberFormat()->setFormatCode('#,##0.00');
        }
        
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="DiferenciasAlmacenes.xlsx"');
        header('Cache-Control: max-age=0');
        header('Cache-Control: max-age=1');
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->setIncludeCharts(TRUE);
        $objWriter->save('php://output');
    }

}
