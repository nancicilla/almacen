<?php

/*
 * Tipodocumento.php
 *
 * Version 0.$Rev: 244 $
 *
 * Creacion: 19/10/2015
 *
 * Ultima Actualizacion: $Date: 2015-03-17 10:26:19 -0400 (mar, 17 mar 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.

 * This is the model class for table "configuracion.tipodocumento".
 *
 * The followings are the available columns in table 'configuracion.tipodocumento':
 * @property integer $id
 * @property string $nombre
 * @property string $usuario
 * @property boolean $eliminado
 * @property boolean $comun
 * @property integer $idtipo
 */

class Tipodocumento extends CActiveRecord {

    public $idtipo;
    public $INGRESO = 1;// nota de ingreso (almacen)
    public $SALIDA = 2;// nota de salida (almacen)
    public $INVENTARIO = 3; //nota por inventario (almacen)
    public $DEVOLUCION = 4;// por devolucion (venta, almacen)
    public $VENTA = 6;//nota venta (venta)
    public $TRASPASO = 7; //traspaso (venta y almacen)
    public $ORDEN_PRODUCCION=12;// salidas para op (produccion)
    public $INGRESO_RESIDUAL=13;// ingreso de subproductos (produccion)
    public $INGRESO_DE_OTROS_ALMACENES = 14;///se puede quitar pero cambiar ids antes por 18
    public $BAJA = 15;/// se usa pero no como constante se podria reemplazar por salida 19
    public $INGRESO_POR_DEVOLUCION = 17;///se puede quitar pero cambiar ids antes por 18
    public $INGRESO_ESPECIAL = 18;//(compra, almacen)
    public $SALIDA_ESP = 19;//(almacen)
    public $NOTARECEPCION=20;//PARA : CAMBIO/DEVOLUCION/ANULACIONVENTA (venta)
    public $NOTAVENTACONSIGNACION=21;// consignacion (venta)
    public $COMBOEMPAQUETAR=22;//EMPAQUEAR - COMBO (venta)
    public $ENTREGAANULADA=23;//ENTREGA ANULADA
    public $RESIDUALANULADA=24;//ENTREGA ANULADA
    const TRASPASO = 231;
    const ORDEN_TRABAJO = 25;
    const ENTREGA_ORDEN_TRABAJO = 26;
    


    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'configuracion.tipodocumento';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('idtipo,nombre', 'required', 'on' => array('insert', 'update')),
            array('idtipo', 'numerical', 'integerOnly' => true),
            array('nombre, usuario', 'length', 'max' => 30),
            array('nombre', 'unique', 'on' => array('insert', 'update'), 'message' => 'El documento ya existe'),
            array('eliminado, comun', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, nombre, usuario, fecha, eliminado, comun, idtipo', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idtipo0' => array(self::BELONGS_TO, 'Tipo', 'idtipo'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'nombre' => 'Documento',
            'usuario' => 'Usuario',
            'eliminado' => 'Eliminado',
            'comun' => 'Comun',
            'idtipo' => 'Tipo de Movimiento',
            'fecha' => 'Fecha',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;
        $criteria->with = array('idtipo0');

        $criteria->compare('t.id', $this->id);
        $criteria->addSearchCondition('t.nombre', $this->nombre, true, 'AND', 'ILIKE');
        $criteria->addSearchCondition('t.usuario', $this->usuario, true, 'AND', 'ILIKE');
        if ($this->fecha != Null) {
            $criteria->addCondition("t.fecha::date = '" . $this->fecha . "'");
        }
        $criteria->compare('t.comun', true);
        $criteria->compare('t.idtipo', $this->idtipo);


        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.id asc',
                'attributes' => array(
                    'idtipo' => array(
                        'asc' => 'idtipo0.nombre',
                        'desc' => 'idtipo0.nombre DESC',
                    ),
                    '*',
                ),
            ),
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Tipodocumento the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     * Sentencias entes de ejecutar validacion
     * @return CActiveRecord con la tupla a validarse
     */
    public function beforeValidate() {
        $this->nombre = strtoupper($this->nombre);
        return parent::beforeValidate();
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->nombre = strtoupper($this->nombre);
        $this->usuario = Yii::app()->user->getName();
        return parent::beforeSave();
    }

    /**
     * Función que verifica que un proceso no tenga dependencias 
     * en otras tablas antes de ser borrado
     * @return type
     */
    protected function beforeSafeDelete() {
        if ($this->isEliminable($this->id)) {
            echo System::messageError('El tipo de documento no puede ser eliminado porque tiene acciones asociadas');
            return;
        } else {
            return parent::beforeSafeDelete();
            return;
        }
    }

    public function isEliminable($pid) {
        $command = Yii::app()->almacen->createCommand("select idtipodocumento_es_eliminable(:pid)");
        $command->bindValue(":pid", $pid, PDO::PARAM_INT);
        return $command->queryScalar();
    }

}
