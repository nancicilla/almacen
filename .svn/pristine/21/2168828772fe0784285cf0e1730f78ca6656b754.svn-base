<?php
/*
 * Informacionproducto.php
 *
 * Version 0.$Rev$
 *
 * Creacion: 17/03/2015
 *
 * Ultima Actualizacion: $Date$:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 *
 * This is the model class for table "informacionproducto".
 *
 * The followings are the available columns in table 'informacionproducto':
 * @property integer $idproducto
 * @property string $codigo
 * @property string $nombre
 * @property integer $idclase
 * @property integer $idfamilia
 * @property integer $idunidad
 * @property integer $idalmacen
 * @property integer $idcaracteristica
 * @property string $nombrecaracteristica
 * @property integer $idsubcaracteristica
 * @property string $nombresubcaracteristica
 * @property string $valor
 * @property string $fechaasignacion
 * @property boolean $tienehijo
 */
class Informacionproducto extends CActiveRecord {
    public $id;
    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'informacionproducto';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('idproducto, idclase, idfamilia, idunidad, idalmacen, idcaracteristica, idsubcaracteristica', 'numerical', 'integerOnly' => true),
            array('codigo', 'length', 'max' => 12),
            array('nombre', 'length', 'max' => 70),
            array('nombrecaracteristica, nombresubcaracteristica, valor, fechaasignacion, tienehijo', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('idproducto, codigo, nombre, idclase, idfamilia, idunidad, idalmacen, idcaracteristica, nombrecaracteristica, idsubcaracteristica, nombresubcaracteristica, valor, fechaasignacion, tienehijo', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'idproducto' => 'Idproducto',
            'codigo' => 'Código',
            'nombre' => 'Nombre',
            'idclase' => 'Idclase',
            'idfamilia' => 'Idfamilia',
            'idunidad' => 'Idunidad',
            'idalmacen' => 'Idalmacen',
            'idcaracteristica' => 'Idcaracteristica',
            'nombrecaracteristica' => 'Nombrecaracteristica',
            'idsubcaracteristica' => 'Idsubcaracteristica',
            'nombresubcaracteristica' => 'Nombresubcaracteristica',
            'valor' => 'Valor',
            'fechaasignacion' => 'Fechaasignacion',
            'tienehijo' => 'Tienehijo',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('t.idproducto', $this->idproducto);
        $criteria->addSearchCondition('t.codigo', $this->codigo, true, 'AND', 'ILIKE');
        $criteria->addSearchCondition('t.nombre', $this->nombre, true, 'AND', 'ILIKE');
        $criteria->compare('t.idclase', $this->idclase);
        $criteria->compare('t.idfamilia', $this->idfamilia);
        $criteria->compare('t.idunidad', $this->idunidad);
        $criteria->compare('t.idalmacen', $this->idalmacen);
        $criteria->compare('t.idcaracteristica', $this->idcaracteristica);
        $criteria->addSearchCondition('t.nombrecaracteristica', $this->nombrecaracteristica, true, 'AND', 'ILIKE');
        $criteria->compare('t.idsubcaracteristica', $this->idsubcaracteristica);
        $criteria->addSearchCondition('t.nombresubcaracteristica', $this->nombresubcaracteristica, true, 'AND', 'ILIKE');
        $criteria->addSearchCondition('t.valor', $this->valor, true, 'AND', 'ILIKE');
        if ($this->fechaasignacion != Null) {
            $criteria->addCondition("t.fechaasignacion::date = '" . $this->fechaasignacion . "'");
        }
        $criteria->compare('t.tienehijo', $this->tienehijo);

        return new CActiveDataProvider($this, array(
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize']),
            ),
            'criteria' => $criteria,
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Informacionproducto the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->codigo = strtoupper($this->codigo);
        $this->nombre = strtoupper($this->nombre);
        $this->nombrecaracteristica = strtoupper($this->nombrecaracteristica);
        $this->nombresubcaracteristica = strtoupper($this->nombresubcaracteristica);
        $this->valor = strtoupper($this->valor);
        return parent::beforeSave();
    }

    /**
     * Devuelve todos las características de tipo general asociadas a un producto
     * @param $idproducto id del producto
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function cargarCaracteristicaGeneral($idproducto) {
        $criteria = new CDbCriteria;

        $criteria->compare('t.idproducto', $idproducto);
        $criteria->addCondition("t.eliminado is false");

        $dataProvider = new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => false,
            'sort' => array(
                'defaultOrder' => '(case when t.idalmacen = 3 then t.ordenterminado else t.ordeninsumo end) asc, '
                                 . 't.idsubcaracteristica asc',
            ),
        ));

        if ($dataProvider->itemCount > 0) {
            return $dataProvider;
        } else {
            return array();
        }
    }

}
