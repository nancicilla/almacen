<?php
/*
 * Puntoventa.php
 *
 * Version 0.$Rev: 244 $
 *
 * Creacion: 01/11/2017
 *
 * Ultima Actualizacion: $Date: 2015-03-17 10:26:19 -0400 (mar, 17 mar 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 
 * This is the model class for table "general.puntoventa".
 *
 * The followings are the available columns in table 'general.puntoventa':
 * @property integer $id
 * @property string $razonsocial
 * @property string $nit
 * @property string $direccion
 * @property string $telefono
 * @property string $fax
 * @property string $casillapostal
 * @property string $email
 * @property string $pagina
 * @property integer $nsucursal
 * @property string $nombreresponsable
 * @property integer $ciresponsable
 * @property string $localidadsucursal
 * @property integer $idalmacen
 * @property string $fecha
 * @property boolean $eliminado
 * @property string $nombre
 * @property integer $idcuentaventa
 */
class Puntoventa extends CActiveRecord
{
    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
            return 'general.puntoventa';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
            // NOTE: you should only define rules for those attributes that
            // will receive user inputs.
            return array(
                    array('nsucursal, ciresponsable, idalmacen, idcuentaventa', 'numerical', 'integerOnly'=>true),
                    array('razonsocial, nombreresponsable', 'length', 'max'=>50),
                    array('nit, fax, casillapostal', 'length', 'max'=>15),
                    array('direccion, email, pagina', 'length', 'max'=>100),
                    array('telefono', 'length', 'max'=>20),
                    array('localidadsucursal', 'length', 'max'=>30),
                    array('fecha, eliminado, nombre', 'safe'),
                    // The following rule is used by search().
                    // @todo Please remove those attributes that should not be searched.
                    array('id, razonsocial, nit, direccion, telefono, fax, casillapostal, email, pagina, nsucursal, nombreresponsable, ciresponsable, localidadsucursal, idalmacen, fecha, eliminado, nombre, idcuentaventa', 'safe', 'on'=>'search'),
            );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
            // NOTE: you may need to adjust the relation name and the related
            // class name for the relations automatically generated below.
            return array(
            );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
            return array(
                    'id' => 'ID',
                    'razonsocial' => 'Razonsocial',
                    'nit' => 'Nit',
                    'direccion' => 'Direccion',
                    'telefono' => 'Telefono',
                    'fax' => 'Fax',
                    'casillapostal' => 'Casillapostal',
                    'email' => 'Email',
                    'pagina' => 'Pagina',
                    'nsucursal' => 'Nsucursal',
                    'nombreresponsable' => 'Nombreresponsable',
                    'ciresponsable' => 'Ciresponsable',
                    'localidadsucursal' => 'Localidadsucursal',
                    'idalmacen' => 'PRINCIPAL',
                    'fecha' => 'Fecha',
                    'eliminado' => 'Eliminado',
                    'nombre' => 'Nombre',
                    'idcuentaventa' => 'Idcuentaventa',
            );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
            // @todo Please modify the following code to remove attributes that should not be searched.

            $criteria=new CDbCriteria;

		$criteria->compare('t.id',$this->id);
		$criteria->addSearchCondition('t.razonsocial',$this->razonsocial,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.nit',$this->nit,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.direccion',$this->direccion,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.telefono',$this->telefono,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.fax',$this->fax,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.casillapostal',$this->casillapostal,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.email',$this->email,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.pagina',$this->pagina,true,'AND','ILIKE');
		$criteria->compare('t.nsucursal',$this->nsucursal);
		$criteria->addSearchCondition('t.nombreresponsable',$this->nombreresponsable,true,'AND','ILIKE');
		$criteria->compare('t.ciresponsable',$this->ciresponsable);
		$criteria->addSearchCondition('t.localidadsucursal',$this->localidadsucursal,true,'AND','ILIKE');
		$criteria->compare('t.idalmacen',$this->idalmacen);
		 if ($this->fecha != Null) {
		$criteria->addCondition("t.fecha::date = '" . $this->fecha. "'");
		 }
		$criteria->addSearchCondition('t.nombre',$this->nombre,true,'AND','ILIKE');
		$criteria->compare('t.idcuentaventa',$this->idcuentaventa);

            return new CActiveDataProvider($this, array(
                    'pagination'=>array(
                        'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),
                    ), 
                    'criteria'=>$criteria,
            ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection()
    {
            return Yii::app()->tpv;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Puntoventa the static model class
     */
    public static function model($className=__CLASS__)
    {
            return parent::model($className);
    }


    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
		$this->razonsocial=strtoupper($this->razonsocial);
		$this->nit=strtoupper($this->nit);
		$this->direccion=strtoupper($this->direccion);
		$this->telefono=strtoupper($this->telefono);
		$this->fax=strtoupper($this->fax);
		$this->casillapostal=strtoupper($this->casillapostal);
		$this->email=strtoupper($this->email);
		$this->pagina=strtoupper($this->pagina);
		$this->nombreresponsable=strtoupper($this->nombreresponsable);
		$this->localidadsucursal=strtoupper($this->localidadsucursal);
		$this->fecha= new CDbExpression('NOW()');
		$this->nombre=strtoupper($this->nombre);
        return parent::beforeSave();            
    }


}
