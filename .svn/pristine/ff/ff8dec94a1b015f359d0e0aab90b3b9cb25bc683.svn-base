var Nota = new Object();
Nota.__proto__ = SystemWindow;
//variables
Nota.nameView = "Nota";
Nota.url = "nota";
Nota.init = function () {
    Nota.filtrarCausa($('#' + this.Id("idtipodocumento")).val());
    try {
        if (this.action === 'update') {
            this.buttonChange({id:'save', label: 'Guardar', key: 'G'});
        }
        if (this.action === 'create') {
            this.buttonChange({id:'save', label: 'Registrar', key: 'R'});
        }
        if (this.action === 'verNota') {
            this.buttonChange({id: 'save', label: 'Cerrar', key: 'C'});
        }
        
        $('#' + this.Id('idtipodocumento')).live('change', function (e)
        {
            Nota.filtrarCausa($(this).val());
        });
        
        this.gridSearchVars('Productonota','&idalmacn='+$('#' + this.Id("idalmacen")).val());
        $('#' + this.Id("idalmacen")).live('change', function (e)
            {
                Nota.gridReset('Productonota');
                Nota.gridSearchVars('Productonota','&idalmacn='+$(this).val());
            });

        this.gridEventClickRow('Productonota','Nota.showDisponible();');
        this.gridEventBlur('Productonota','Nota.hiddenDisponible();');
    } catch (err) {
        alert('Error al cargar Nota.init()');
    }
}

Nota.options = function () {
    this.setActions('create', {
        WindowTitle: 'Crear Nota',
        initButtons: 'save,cancel',
        layerEndOn: false,
        ableBackWindow: true
    });
    this.setActions('update', {        
        WindowTitle: 'Modificar Nota',
        initButtons: 'save,cancel',
        layerEndOn: false,
        ableBackWindow: true
    });
    this.setActions('despachar', {        
        WindowTitle: 'Despachar Nota',
        initButtons: 'save,cancel',
        layerEndOn: false,
        ableBackWindow: true
    });
    this.setActions('verNota', {
            layerHeight: 356,
            WindowWidth: 740,
            WindowHeight: 363,
            WindowTitle: 'Ver Nota',
            initButtons: 'back',
            layerEndOn: false,
            ableBackWindow: true
    });

    var options = {
        WindowName: this.nameView,
        WindowTitle: 'Nota',
        WindowWidth: 725,
        WindowHeight: 460,
        WindowInitFunction: '',
        WindowCloseFunction: '',
        WindowMaxFunction: '',
        WindowMinFunction: '',
        WindowOnBackground: true,
        typeLoading: 'on'// on,off,onMain
    };
    return options;
}

Nota.beforeCreate = function () {
    var error = false;//false es no existe error antes de crear formulario
    return error;
}
Nota.afterCreate = function () {
    Nota.reload();
    this.print();
}

Nota.beforeUpdate = function () {
    var error = false;//false es no existe error antes de actulizar formulario
    return error;
}
Nota.afterUpdate = function () {
    Nota.closeWindow();
}

Nota.beforeDelete = function () {
    var error = false;//false es no existe error antes de eliminar formulario
    return error;
}

Nota.despacho = function(options){
    this.action='despachar';
       var updateFunction=(options['updateFunction']!=null)?options['updateFunction']:'';
       var idKey=(options['idKey']!=null)?options['idKey']:'';       
       var options=this.options();
       options['WindowTitle']=(this.layer[this.action]!=null && this.layer[this.action]['WindowTitle']!=null)?this.layer[this.action]['WindowTitle']:this.action;
       options['WindowWidth']= 260,
       options['WindowHeight']= 305,
       options.url=this.url+'/despachar';
       options.varSend='id='+idKey;
       options.idKey=idKey;
       options.updateFunction=updateFunction;
       this.open(options);    
}

Nota.afterDespachar = function (){
    Nota.closeWindow();
    admNota.showMessage("El despacho se registr√≥ correctamente!");
}


/**
 * Function para filtrar causas en el dropdownlist al elegir un determinado tipo
 * de nota
 */
Nota.filtrarCausa = function(idtipodocumento) {
    var action = 'almacen/causa/filtrarCausa?idtipodocumento='+idtipodocumento;
    $.getJSON(action, function (listaJson) {
        $('#Nota1_idcausa').find('option').each(function () {
            $(this).remove();
        });
        $.each(listaJson, function (key, causa) {
            $('#Nota1_idcausa').append("<option value='" + causa.id + "'>" + causa.nombre + "</option>");
        });
    });
};

Nota.print = function () {
    var url = 'ReporteNota?id='+this.idKey();
    this.openUrl(url);
};

Nota.showDisponible = function(){
    var divSaldo = this.ById('divSaldo');
    var grid = this.getSGridView('Productonota');   
    
    var saldodisponible = grid.rowSelected().get('disponible');

    if(grid.rowSelected().get('idproducto') != ''){
        divSaldo.innerHTML = parseFloat(saldodisponible).toFixed(4);
        divSaldo.parentElement.style.visibility = 'visible';
    }else{
        divSaldo.innerHTML = '';
        divSaldo.parentElement.style.visibility = 'hidden';
    }  
}

Nota.hiddenDisponible = function(){
   var divSaldo = this.ById('divSaldo');
   divSaldo.parentElement.style.visibility = 'hidden';
}

Nota.verificarGridInsumos = function() {
    var grid = this.getSGridView('Productonota'); 
    
    var idtipodocumento = this.get("idtipodocumento");
    var ingresoSalida;
    
    if(idtipodocumento != null)
    {
        var action = 'almacen/nota/devuelveIdtipo?idtipodocumento='+idtipodocumento;
        $.getJSON(action, function (listaJson) {
            $.each(listaJson, function (key, documento) {
                ingresoSalida = documento.idtipo;
                if(ingresoSalida == 2) // SALIDA
                {
                    for(var f = 1; f <= grid.rows; f++)
                    {
                        var disponible = grid.row(f).get('disponible');
                        var cantidad = grid.row(f).get('cantidad');

                        if(cantidad > disponible)
                            grid.row(f).attributes('cantidad',{validate:false,tooltip:'Excede la cantidad disponible'});
                        else
                            grid.row(f).attributes('cantidad',{validate:true,tooltip:''});
                        
                        if(cantidad == 0)
                            grid.row(f).attributes('cantidad',{validate:false,tooltip:'La cantidad debe ser mayor a CERO!'});
                    }
                }
                else
                {
                    for(var f = 1; f <= grid.rows; f++)
                    {
                        grid.row(f).attributes('cantidad',{validate:true,tooltip:''});
                        
                        var cantidad = grid.row(f).get('cantidad');
                        if(cantidad == 0)
                            grid.row(f).attributes('cantidad',{validate:false,tooltip:'La cantidad debe ser mayor a CERO!'});
                    }
                }

            });
        });
    }
}

Nota.verNota = function(id) {
    this.action='verNota';
    this.open(this.getOptions(id));
};

Nota.afterVerNota = function(id) {
    Nota.closeWindow();
};

