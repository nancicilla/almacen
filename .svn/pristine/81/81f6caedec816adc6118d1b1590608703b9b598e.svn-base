<?php
/*
 * Controlcalidad.php
 *
 * Version 0.$Rev: 244 $
 *
 * Creacion: 22/02/2018
 *
 * Ultima Actualizacion: $Date: 2015-03-17 10:26:19 -0400 (mar, 17 mar 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 
 * This is the model class for table "controlcalidad".
 *
 * The followings are the available columns in table 'controlcalidad':
 * @property integer $id
 * @property string $gestionschema
 * @property string $gestionschemaactive
 * @property string $codigodocumento
 * @property string $codigohistorial
 * @property string $fecha
 * @property string $usuario
 * @property boolean $eliminado
 * @property integer $iddocumento
 * @property integer $idtipodocumento
 * @property string $gestionschemadocumento
 * @property integer $idestado
 * @property integer $idcliente
 * @property string $razonnofinalizado
 * @property boolean $aceptada
 * @property string $usuariofinalizado
 *
 * The followings are the available model relations:
 * @property Tipodocumento $idtipodocumento0
 */
class Controlcalidad extends CActiveRecord
{
    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
            return 'controlcalidad';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
            // NOTE: you should only define rules for those attributes that
            // will receive user inputs.
            return array(
                    array('gestionschema', 'required'),
                    array('iddocumento, idtipodocumento, idestado, idcliente', 'numerical', 'integerOnly'=>true),
                    array('gestionschema, gestionschemaactive, gestionschemadocumento', 'length', 'max'=>9),
                    array('codigodocumento', 'length', 'max'=>50),
                    array('codigohistorial', 'length', 'max'=>20),
                    array('usuario, usuariofinalizado', 'length', 'max'=>30),
                    array('fecha, eliminado, razonnofinalizado, aceptada', 'safe'),
                    // The following rule is used by search().
                    // @todo Please remove those attributes that should not be searched.
                    array('id, gestionschema, gestionschemaactive, codigodocumento, codigohistorial, fecha, usuario, eliminado, iddocumento, idtipodocumento, gestionschemadocumento, idestado, idcliente, razonnofinalizado, aceptada, usuariofinalizado', 'safe', 'on'=>'search'),
            );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
            // NOTE: you may need to adjust the relation name and the related
            // class name for the relations automatically generated below.
            return array(
                    'idtipodocumento0' => array(self::BELONGS_TO, 'Tipodocumento', 'idtipodocumento'),
            );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
            return array(
                    'id' => 'ID',
                    'gestionschema' => 'Gestionschema',
                    'gestionschemaactive' => 'Gestionschemaactive',
                    'codigodocumento' => 'Codigo:
Identificador de documento',
                    'codigohistorial' => 'Codigohistorial',
                    'fecha' => 'Fecha',
                    'usuario' => 'Usuario',
                    'eliminado' => 'Eliminado',
                    'iddocumento' => 'idnotarecepcion/idtraspaso(devolucion)/idconsignacion',
                    'idtipodocumento' => 'Idtipodocumento',
                    'gestionschemadocumento' => 'Gestionschemadocumento',
                    'idestado' => 'Idestado',
                    'idcliente' => 'Idcliente',
                    'razonnofinalizado' => 'Razonnofinalizado',
                    'aceptada' => 'Aceptada',
                    'usuariofinalizado' => 'Usuariofinalizado',
            );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
            // @todo Please modify the following code to remove attributes that should not be searched.

            $criteria=new CDbCriteria;

		$criteria->compare('t.id',$this->id);
		$criteria->addSearchCondition('t.gestionschema',$this->gestionschema,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.gestionschemaactive',$this->gestionschemaactive,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.codigodocumento',$this->codigodocumento,true,'AND','ILIKE');
		$criteria->addSearchCondition('t.codigohistorial',$this->codigohistorial,true,'AND','ILIKE');
		 if ($this->fecha != Null) {
		$criteria->addCondition("t.fecha::date = '" . $this->fecha. "'");
		 }
		$criteria->addSearchCondition('t.usuario',$this->usuario,true,'AND','ILIKE');
		$criteria->compare('t.iddocumento',$this->iddocumento);
		$criteria->compare('t.idtipodocumento',$this->idtipodocumento);
		$criteria->addSearchCondition('t.gestionschemadocumento',$this->gestionschemadocumento,true,'AND','ILIKE');
		$criteria->compare('t.idestado',$this->idestado);
		$criteria->compare('t.idcliente',$this->idcliente);
		$criteria->addSearchCondition('t.razonnofinalizado',$this->razonnofinalizado,true,'AND','ILIKE');
		$criteria->compare('t.aceptada',$this->aceptada);
		$criteria->addSearchCondition('t.usuariofinalizado',$this->usuariofinalizado,true,'AND','ILIKE');

            return new CActiveDataProvider($this, array(
                    'pagination'=>array(
                        'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),
                    ), 
                    'criteria'=>$criteria,
            ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection()
    {
            return Yii::app()->venta;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Controlcalidad the static model class
     */
    public static function model($className=__CLASS__)
    {
            return parent::model($className);
    }


    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
		$this->gestionschema=strtoupper($this->gestionschema);
		$this->gestionschemaactive=strtoupper($this->gestionschemaactive);
		$this->codigodocumento=strtoupper($this->codigodocumento);
		$this->codigohistorial=strtoupper($this->codigohistorial);
		$this->fecha= new CDbExpression('NOW()');
		$this->usuario= Yii::app()->user->getName();
		$this->gestionschemadocumento=strtoupper($this->gestionschemadocumento);
		$this->razonnofinalizado=strtoupper($this->razonnofinalizado);
		$this->usuariofinalizado=strtoupper($this->usuariofinalizado);
        return parent::beforeSave();            
    }


}
