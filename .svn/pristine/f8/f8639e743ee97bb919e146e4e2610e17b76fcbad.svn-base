<?php

/*
 * DevoluciontpvController.php
 *
 * Version 0.$Rev: 286 $
 *
 * Creacion: 29/11/2017
 *
 * Ultima Actualizacion: $Date: 2015-10-13 09:08:14 -0400 (mar 13 de oct de 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 */

class DevoluciontpvController extends Controller {
    /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */

    /*
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */

    public function filters() {
        return array_merge(
                array(
                    'accessControl',
                    array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
                )
        );
    }

    /*
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */

    private function _publicActionsList() {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',
        );
    }

    public function accessRules() {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Creates a new model.
     */
    public function actionCreate() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Devoluciontpv;

        if (isset($_POST['Devoluciontpv'])) {
            $model->attributes = $_POST['Devoluciontpv'];
            if ($model->save()) {
                echo System::dataReturn('Creación exitosa!', array('id' => SeguridadModule::enc($model->id)));
                return;
            } else {
                echo System::hasErrors('Revise los datos! ', $model);
                return;
            }
        }

        $this->renderPartial('create', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Updates a particular model.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = $this->loadModel(SeguridadModule::dec($id));
        $iddevolucion = SeguridadModule::dec($id);
        $gridDevolucionproducto = Devoluciontpv::model()->obtenerProductosDeDevolucion(SeguridadModule::dec($id));

        if (isset($_POST['Devoluciontpv'])) {
            $model->attributes = $_POST['Devoluciontpv'];
            if ($model->save()) {
                echo System::dataReturn('', array('id' => SeguridadModule::enc($model->id)));
                return;
            } else {
                echo System::hasErrors('Revise los datos! ', $model);
                return;
            }
        }

        $this->renderPartial('update', array(
            'model' => $model,
            'gridDevolucionproducto' => $gridDevolucionproducto
                ), false, true);
    }

    /**
     * Deletes safely a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        $this->loadModel(SeguridadModule::dec($id))->safeDelete();
        self::actionAdmin();
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Devoluciontpv('search');
        $model->unsetAttributes();  // clear any default values

        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Devoluciontpv'])) {
            $model->attributes = $_GET['Devoluciontpv'];
            if (!$model->validate()) {
                echo System::hasErrorSearch($model);
                return;
            }
        }

        $this->renderPartial('admin', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Devoluciontpv the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        $model = Devoluciontpv::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param Devoluciontpv $model the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'devoluciontpv-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    /**
     * Acept a particular model.
     * @param integer $id the ID of the model to be updated
     */
    public function actionAceptarDevolucion($id) {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = $this->loadModel(SeguridadModule::dec($id));
        $iddevolucion = SeguridadModule::dec($id);
        $gridDevolucionproducto = Devoluciontpv::model()->obtenerProductosDeDevolucion(SeguridadModule::dec($id));

        if (isset($_POST['Devoluciontpv'])) {
            $disponible = $_POST['Devoluciontpv']['disponible'];
            if (!isset($_POST['gridDevolucionproducto'])) {
                echo System::hasErrors('No existe Productos para Devolución! ', $model);
                return;
            }
            $model->attributes = $_POST['Devoluciontpv'];
            $model->idestado = Estadotpv::RECEPCION;
//             print_r($model->getErrors());return;
            if ($model->save()) {
                Devolucionproductotpv::model()->deleteAllByAttributes(array('iddevolucion' => $iddevolucion));
                $productos = $_POST['gridDevolucionproducto'];
                $cantidad = count($productos);
                for ($i = 1; $i <= $cantidad; $i++) {
                    $dato = $productos[$i];
                    $modelDevolucionProducto = new Devolucionproductotpv;
                    $modelDevolucionProducto->cantidaddevolucion = $dato['cantidaddevolucion'];
                    $modelDevolucionProducto->idproducto = $dato['idproducto'];
                    $modelDevolucionProducto->iddevolucion = $model->id;
                    $modelDevolucionProducto->save();
                }
                echo System::dataReturn('', array('id' => SeguridadModule::enc($model->id)));
                return;
            } else {
                echo System::hasErrors('Revise los datos! ', $model);
                return;
            }
        }

        $this->renderPartial('aceptar', array(
            'model' => $model,
            'gridDevolucionproducto' => $gridDevolucionproducto
                ), false, true);
    }
    
    /*
     * Buscador de Código de Barras
     */
    public function actionBuscacodigoBarra()
    {
        if(isset($_POST['codigobarra']))
        {
            $idalmacen=isset($_POST['idalmacen'])?$_POST['idalmacen']:'';
            $productoExcluido = null;
            
            $model = Producto::model()->find('coduniversal = '.$_POST['codigobarra'].' and idalmacen ='.$_POST['idalmacen']);
            if($model == null)
                echo 0;
            else
            {
                $arrayDatosProducto = array(
                    'idproducto' => $model->id,
                    'codigobarra' => $model->coduniversal,
                    'codigo' => $model->codigo,
                    'nombre' => $model->nombre,
                    'saldo' => $model->saldo,
                    'reserva' => $model->reserva,
                    'saldoDisponible' => $model->saldo - $model->reserva,
                    'unidad' => $model->idunidad > 0? Unidad::model()->find('id = '.$model->idunidad)->simbolo : '',
                );
                echo json_encode($arrayDatosProducto);
            }
        }
    }
    
    /**
     * Genera un reporte de Devolucion
     * @param type $id de Devolucion
     * @throws CrugeException
     */
    public function actionReporteDevolucion($id) {

        $txt = SeguridadModule::dec($id);
        $re = new JasperReport('/reports/Tpv/devolucion', JasperReport::FORMAT_PDF, array(
            'pId' => $txt,
            'pUsuario' => Yii::app()->user->getName(),
            'formatNumberProduccion' => Yii::app()->params['formatNumberProduccion'],
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));

        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }
}
