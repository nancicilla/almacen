<?php

/*
 * ProductoController.php
 *
 * Version 0.$Rev$
 *
 * Creacion: 17/03/2015elk
 *e
 * Ultima Actualizacion: $Date$:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 */

class ProductoController extends Controller {
    /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */

    /**
     *
     * @var string  Ruta del subdirectorio dentro de assets donde creará la 
     * carpeta temporal
     */
    private $SUB_DIRECTORY = '/producto/images/';

    /**
     *
     * @var string  nombre del directorio donde se subiran los archivos      
     */
    private $UPLOAD_DIRECTORY = '/uploads';

    /**
     *
     * @var string  nombre del utilizado para subir archivos     
     */
    public $UPLOAD_FILE = '/upload.php';

    /**
     *
     * @var string  nombre del utilizado para eliminar archivos subidos     
     */
    public $DELETE_FILE = '/delete.php';

    /**
     *
     * @var string  nombre del archivo imagen utilizado cuando no cuente con ninguna imagen    
     */
    public $NO_PHOTO_FILE = '/no_photo_small.png';

    /*
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */

    public function filters() {
        return array_merge(
                array(
                    'accessControl',
                    array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
                )
        );
    }

    /*
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */

    private function _publicActionsList() {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',
        );
    }

    public function accessRules() {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);
        $model = new Producto;
        $no_photo = $this->NO_PHOTO_FILE;
        $productoComplementario = array();
        $productoCaracteristica = array();
        $productoImagen = array();

        if (isset($_POST['Producto'])) {
            $model->attributes = $_POST['Producto'];

            if (isset($_POST['Productocaracteristica'])) {
                $productoCaracteristica = $_POST['Productocaracteristica'];
            }
            if (isset($_POST['Productoimagen'])) {
                $productoImagen = $_POST['Productoimagen'];
            }
            if (isset($_POST['productoComplementario'])) {
                $productoComplementario = $_POST['productoComplementario'];
            }

            $model->validate();
            $model->stockmaximo = 0;
            $model->stockminimo = 0;
            $model->stockreposicion = 0;
            $model->puntopedido = 0;
            $model->saldo = 0;
            $model->costo = 0;
            $model->utilidad = 0;
            $model->reserva = 0;

            $producto = Almacen::model()->find('codigo = ' . $_POST['Producto']['codigoAlmacen']);
            $vigencia = Vigencia::model()->find('idalmacen = ' . $producto->id . ' and usuariofin is null');
            if ($vigencia) {
                echo System::hasErrors('No se puede crear productos porque el almacén ' . $producto->nombre . ' está parametrizado como almacén de productos en proceso!');
                return;
            } else {            
                    
                    //INICIA historial cambios
                    $arraycambios=array();
                    $fechacambio = date('Y-m-d H:i:s');
                    $usuariocambio = Yii::app()->user->getName();
                    if($model->historialcambios!=null)
                    { 
                        $arraycambios=CJSON::decode($model->historialcambios,true);
                        $_POST['Producto']['fechacambio']=$fechacambio;
                        $_POST['Producto']['usuario']=$usuariocambio;
                        array_push($arraycambios,$_POST['Producto'] );}
                    else{
                        $_POST['Producto']['fechacambio']=$fechacambio;
                        $_POST['Producto']['usuario']=$usuariocambio;
                        array_push($arraycambios, $_POST['Producto']);
                    }                
                    $model->historialcambios=CJSON::encode($arraycambios);
                    //FIN historial cambios
                  
                
                if ($model->save()) {
                    Productocaracteristica::model()->registrarGeneral($model->id, $productoCaracteristica);
                    Productocaracteristica::model()->registrarImagen($model->id, $productoImagen, Yii::app()->session['directorioTemporal']);
                    Productoproducto::model()->registrarComplementario($model->id, $productoComplementario);
                    $model->registrarHijo($model->id);
                    echo System::dataReturn('Creación exitosa!', array('id' => SeguridadModule::enc($model->id)));
                    $model->emptyAttributes();
                    $productoCaracteristica = array();
                    $productoImagen = array();
                    $no_photo = $this->NO_PHOTO_FILE;
                    $productoComplementario = array();
                    $this->directorioTemporal();
                    return;
                } else {
                    echo System::hasErrors('Revise los datos!', $model);
                    return;
                }
            }
        } else {
            $this->directorioTemporal();
        }

        $this->renderPartial('create', array(
            'model' => $model,
            'productoCaracteristica' => $productoCaracteristica,
            'productoImagen' => $productoImagen,
            'productoComplementario' => $productoComplementario,
                ), false, true);
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);
        $existeImagen = 'false';
        $auxiliar = $this->loadModel(SeguridadModule::dec($id))->isActualizable();
        if ($auxiliar != 'exito') {
            echo System::conditionOpen(false, $auxiliar);
            return;
        } else {
            $model = $this->loadModel(SeguridadModule::dec($id));
            $model->existeRelacionProduccion = false;

            $ordenProducto = new SoapClient('http://127.0.0.1/coreT/produccion/wSProducto/existeRelacionProductoEnProduccion');
            $respuesta = $ordenProducto->existeRelacionProducto(SeguridadModule::dec($id));

            switch ($respuesta) {
                case 1:
                    $model->existeRelacionProduccion = false;
                    break;

                default:
                    $model->existeRelacionProduccion = true;
                    break;
            }
            /*
             * Si es 0 quiere decir que tiene alguna relacion
             * Si es 1 entonces no existe ninguna relacion 
             * Si es -1 entonces ocurrio algún error
             */

            $productoCaracteristica = array();
            $productoImagen = array();
            $productoComplementario = array();

            if (isset($_POST['Productocaracteristica'])) {
                $productoCaracteristica = $_POST['Productocaracteristica'];
            } else {
                $productoCaracteristica = Informacionproducto::model()->cargarCaracteristicaGeneral(SeguridadModule::dec($id));
            }

            if (isset($_POST['Productoimagen'])) {
                $productoImagen = $_POST['Productoimagen'];
            } else {
                if (isset($_POST['Producto'])) {
                    $productoImagen = array();
                } else {
                    $productoImagen = Productocaracteristica::model()->cargarCaracteristicaImagen(SeguridadModule::dec($id));
                    if (count($productoImagen) > 0) {
                        $existeImagen = 'true';
                    }
                }
            }

            if (isset($_POST['productoComplementario'])) {
                $productoComplementario = $_POST['productoComplementario'];
            } else {
                $productoComplementario = Productoproducto::model()->productoComplementario(SeguridadModule::dec($id));
            }

            if (isset($_POST['Producto'])) {
                $model->attributes = $_POST['Producto'];
                    
                
                //INICIA historial cambios
                $arraycambios=array();
                $fechacambio = date('Y-m-d H:i:s');
                $usuariocambio = Yii::app()->user->getName();
                if($model->historialcambios!=null)
                { 
                    $arraycambios=CJSON::decode($model->historialcambios,true);
                    $_POST['Producto']['fechacambio']=$fechacambio;
                    $_POST['Producto']['usuario']=$usuariocambio;
                    array_push($arraycambios,$_POST['Producto'] );}
                else{
                    $_POST['Producto']['fechacambio']=$fechacambio;
                    $_POST['Producto']['usuario']=$usuariocambio;
                    array_push($arraycambios, $_POST['Producto']);
                }                
                $model->historialcambios=CJSON::encode($arraycambios);
                //FIN historial cambios
                    
                $model->validate();
                if ($model->save()) {
                    Productocaracteristica::model()->deleteAll('idproducto =' . $model->id);
                    Productoproducto::model()->deleteAll('idproducto =' . $model->id);
                    Productocaracteristica::model()->registrarGeneral($model->id, $productoCaracteristica);
                    Productocaracteristica::model()->registrarImagen($model->id, $productoImagen, Yii::app()->session['directorioTemporal']);

                    if (isset($_POST['productoComplementario']))
                        Productoproducto::model()->registrarComplementario($model->id, $productoComplementario);

                    $model->actualizarHijo($model->id);

                    $model->emptyAttributes();
                    $productoCaracteristica = array();
                    $productoImagen = array();
                    $no_photo = $this->NO_PHOTO_FILE;
                    $productoComplementario = array();
                    $this->directorioTemporal();
                    if (isset($_POST['Productoimagen'])) {
                        $productoImagen = $_POST['Productoimagen'];
                    }
                    echo System::dataReturn('', array('id' => SeguridadModule::enc($model->id)));
                    return;
                } else {
                    echo System::hasErrors('Revise los datos!', $model);
                    return;
                }
            } else {
                unset(Yii::app()->session['directorioTemporal']);
                $temporal = new Temporal(AlmacenModule::getAssetFolder(), $this->SUB_DIRECTORY, $this->UPLOAD_DIRECTORY, $this->UPLOAD_FILE, $this->DELETE_FILE, $this->NO_PHOTO_FILE);
                Yii::app()->session['directorioTemporal'] = $temporal->getTempFolderUrl();
                Productocaracteristica::model()->prepararImagen(SeguridadModule::dec($id), Yii::app()->session['directorioTemporal']);
                $modeloFamilia = Familia::model()->informacionFamilia($model->idfamilia);
                $modeloClase = Clase::model()->informacionClase($model->idclase);
                $model->nombreFamilia = $modeloFamilia['nombre'];
                $model->codigoFamilia = $modeloFamilia['codigo'];
                $model->nombreCompletadoFamilia = $modeloFamilia['nombre'];

                $model->nombreClase = $modeloClase['nombre'];
                $model->codigoClase = $modeloClase['codigo'];
                $model->nombreCompletadoClase = $modeloClase['nombre'];
                $almacen = Almacen::model()->findByPK($model->idalmacen);
                $model->codigoAlmacen = $almacen->codigo;
            }
            $model->existeImagen = $existeImagen;
            $this->renderPartial('update', array(
                'model' => $model,
                'productoCaracteristica' => $productoCaracteristica,
                'productoImagen' => $productoImagen,
                'productoComplementario' => $productoComplementario,
                    ), false, true);
        }
    }

    /**
     * Verifica si un cliente esta bloqueado, Si el cliente ya esta bloqueado retorna la lista de clientes actualizada
     * @param type $id Identificador de cliente
     */
    public function actionEliminar($id) {
        if (!$id) {
            /* $respuestaArray=array("estado"=>-1,"descripcion"=>"No se envió el id del producto al controlador");
              echo CJSON::encode($respuestaArray);
              return; */
            echo System::messageError('No se envió el id del producto al controlador.');
            //self::actionAdmin();  
            return;
        }

        $ordenProducto = new SoapClient('http://127.0.0.1/coreT/produccion/wSProducto/existeRelacionProductoEnProduccion');
        $respuesta = $ordenProducto->existeRelacionProducto(SeguridadModule::dec($id));
        
        switch ($respuesta) {
            case 1:
                //$respuestaArray=array("estado"=>1,"descripcion"=>"No existe relacion.");
                $modelProducto = Producto::model()->findByPk(SeguridadModule::dec($id));
                if ($modelProducto->safeDelete()) {
                    echo System::messageConfirm('El producto se eliminó corrrectamente.');
                    self::actionAdmin();
                    return;
                } else {
                    echo System::messageError('Error al eliminar el producto.');
                }


                break;

            case 0:
                //$respuestaArray=array("estado"=>0,"descripcion"=>"No se puede proceder con esta acción, existe una relación en el módulo de producción.");
                echo System::messageError('No se puede proceder con esta acción, existe una relación en el módulo de producción.');
                break;

            default:
                //$respuestaArray=array("estado"=>-1,"descripcion"=>"Ocurrió un error al invocar al ws de producción..");
                echo System::messageError('Ocurrió un error al invocar al ws de producción...');
                break;
        }

        //echo CJSON::encode($respuestaArray);
        /*
         * Si es 0 quiere decir que tiene un relacion
         * Si es 1 entonces no existe ninguna relacion 
         * Si es -1 entonces ocurrio algún error
         */
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        $this->loadModel(SeguridadModule::dec($id))->safeDelete();
        self::actionAdmin();
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Producto('search');
        $model->unsetAttributes();  // clear any default values

        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Producto'])) {
            $model->attributes = $_GET['Producto'];
            if (!$model->validate()) {
                echo System::hasErrorSearch($model);
                return;
            }
        }

        $this->renderPartial('admin', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Producto the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        $model = Producto::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Familia the loaded model
     * @throws CHttpException
     */
    public function loadFamiliaModel($id) {
        $model = Familia::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param Producto $model the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'producto-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    /**
     * Permite utilizar un autocomplete para la busqueda de productos con
     * el nombre de producto concatenado a su codigo, nombreCompletoProducto
     * tiene como parametros de entrada el id del 
     * almacen al cual esta asociado el producto, y el termino que se busca
     */
    public function actionAutocomplete() {
        $idAlmacen = $_GET['idalmacen'];
        $request = trim($_GET['term']);
        $requestMayuscula = strtoupper($request);

        if ($request != '') {
            $criteria = new CDbCriteria;
            $criteria->select = 't.*';
            $criteria->condition = "t.eliminado=false and (t.nombre like :valorentrada or t.codigo like :valorentrada)";
            $criteria->addCondition("idalmacen= :value2");
            $criteria->params = array(':valorentrada' => "%$requestMayuscula%", ':value2' => (int) $idAlmacen);
            $criteria->order = "nombre asC";
            $criteria->limit = 10;
            $model = Producto::model()->findAll($criteria);
            $data = array();

            foreach ($model as $get) {
                $data[] = array(
                    'label' => $get->codigo . ' (' . $get->nombre . ')',
                    'value' => $get->codigo . ' (' . $get->nombre . ')',
                    'nombre' => $get->codigo . ' (' . $get->nombre . ')',
                    'id' => $get->id);
            }

            $this->layout = 'empty';
            echo CJSON::encode($data);
        }
    }

    /**
     * Muestra los productos y su stock
     */
    public function actionStock() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Producto('searchStock');

        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Producto'])) {
            $model->attributes = $_GET['Producto'];
            if (!$model->validate()) {
                echo System::hasErrorSearch($model);
                return;
            }
        }

        $this->renderPartial('stock', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Genera el reporte en formato pdf del stock de productos en base a la 
     * vista del cgridview de la interfaz de stock, en caso de que el reporte
     * no tenga paginas se muestra una excepción
     */
    public function actionReporteProductoStock() {
        $re = new JasperReport('/reports/Almacen/productoStock', JasperReport::FORMAT_PDF, array(
            'pIds' => SWUtil::aRtoArrayReport(Producto::model()->findAll(Yii::app()->session['productoreporteStock']), 'id'),
            'pUsuario' => Yii::app()->user->getName(),
            'pFormatoNumero' => Yii::app()->params['formatNumberAlm'],
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));
        $re->exec();

        if ($re->getPages() > 0 && Yii::app()->session['mostrarReporteProductoStock']) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Permite utilizar un autocomplete para la busqueda de productos a 
     * partir de su codigo, tiene como parametros de entrada el id del 
     * almacen al cual esta asociado el producto, y el termino que se busca
     */
    public function actionAutocompleteCodigo() {
        $idAlmacen = $_GET['idalmacen'];
        $request = trim($_GET['term']);

        if ($request != '') {
            $criteria = new CDbCriteria;
            $criteria->select = 't.*';
            $criteria->condition = "t.codigo ilike :valorentrada and t.eliminado=false";
            if ($idAlmacen != NULL) {
                $criteria->addCondition("idalmacen=" . (int) $idAlmacen);
            }
            $criteria->params = array(':valorentrada' => "%$request%");
            $criteria->order = "codigo asC";
            $model = Producto::model()->findAll($criteria);
            $data = array();

            foreach ($model as $get) {
                $data[] = array(
                    'label' => $get->codigo,
                    'value' => $get->codigo,
                    'nombre' => $get->codigo,
                    'id' => $get->id);
            }

            $this->layout = 'empty';
            echo CJSON::encode($data);
        }
    }

    /**
     * Permite utilizar un autocomplete para la busqueda de productos a 
     * partir del nombre, tiene como parametros de entrada el id del 
     * almacen al cual esta asociado el producto, y el termino que se busca
     */
    public function actionAutocompleteNombre() {
        $idAlmacen = $_GET['idalmacen'];
        $request = trim($_GET['term']);

        if ($request != '') {
            $criteria = new CDbCriteria;
            $criteria->select = 't.*';
            $criteria->condition = "t.nombre ilike :valorentrada and t.eliminado=false";
            if ($idAlmacen != NULL) {
                $criteria->addCondition("idalmacen=" . (int) $idAlmacen);
            }
            $criteria->params = array(':valorentrada' => "%$request%");
            $criteria->order = "nombre asC";
            $model = Producto::model()->findAll($criteria);
            $data = array();

            foreach ($model as $get) {
                $data[] = array(
                    'label' => $get->nombre,
                    'value' => $get->nombre,
                    'nombre' => $get->nombre,
                    'id' => $get->id);
            }

            $this->layout = 'empty';
            echo CJSON::encode($data);
        }
    }

    /**
     * Genera el reporte en detalle del producto
     */
    public function actionReporteProductoDetalle($id) {
        $re = new JasperReport('/reports/Almacen/productoDetalle', JasperReport::FORMAT_PDF, array(
            'pId' => SeguridadModule::dec($id),
            'pRuta' => 'ftp://' . Yii::app()->ftp->host . '/' . Yii::app()->ftp->folder . '/' . Productocaracteristica::model()->tableName() . '/',
            'pUsuario' => Yii::app()->user->getName(),
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));
        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Crea un directorio temporal
     */
    public function directorioTemporal() {
        unset(Yii::app()->session['directorioTemporal']);
        $temporal = new Temporal(AlmacenModule::getAssetFolder(), $this->SUB_DIRECTORY, $this->UPLOAD_DIRECTORY, $this->UPLOAD_FILE, $this->DELETE_FILE, $this->NO_PHOTO_FILE);
        Yii::app()->session['directorioTemporal'] = $temporal->getTempFolderUrl();
    }

    /**
     * Genera el reporte en formato pdf de los productos en lote
     */
    public function actionReporteProductoLote() {
        $re = new JasperReport('/reports/Almacen/productoLote', JasperReport::FORMAT_PDF, array(
            'pIds' => SWUtil::aRtoArrayReport(Producto::model()->findAll(Yii::app()->session['reporteProductoLote']), 'id'),
            'pUsuario' => Yii::app()->user->getName(),
            'pRuta' => 'ftp://' . Yii::app()->ftp->host . '/' . Yii::app()->ftp->folder . '/' . Productocaracteristica::model()->tableName() . '/',
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));

        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Genera el reporte en formato pdf el listado de productos del gridview
     */
    public function actionReporteProductoLista() {
        $re = new JasperReport('/reports/Almacen/productoLista', JasperReport::FORMAT_PDF, array(
            'pIds' => SWUtil::aRtoArrayReport(Producto::model()->findAll(Yii::app()->session['reporteProductoLote']), 'id'),
            'pUsuario' => Yii::app()->user->getName(),
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));

        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Validar si es caracteristica padre, debe seleccionar un hijo
     *  OBLIGATORIAMENTE
     */
    public function actionValidarSubCaracteristica() {
        $productoCaracteristica = isset($_POST['Productocaracteristica']) ? $_POST['Productocaracteristica'] : array();
        $tabla = array();
        foreach ($productoCaracteristica as $fila) {
            if (Caracteristica::model()->tieneHijo($fila['idcaracteristica']) && ($fila['nombresubcaracteristica'] == '')) {
                $fila['validate'] = false;
            } else {
                $fila['validate'] = true;
            }
            $tabla[] = $fila;
        }
        echo SGridView::validate($tabla, array());
    }

    /**
     * Validar si no es caracteristica padre debe introducir 
     * un valor OBLIGATORIAMENTE
     */
    public function actionValidarValor() {
        $productoCaracteristica = isset($_POST['Productocaracteristica']) ? $_POST['Productocaracteristica'] : array();
        $tabla = array();
        foreach ($productoCaracteristica as $fila) {
            if (Caracteristica::model()->tieneHijo($fila['idcaracteristica'])) {
                $fila['validate'] = true;
            } else if ($fila['valor'] == "") {
                $fila['validate'] = false;
            } else {
                $fila['validate'] = true;
            }
            $tabla[] = $fila;
        }
        echo SGridView::validate($tabla, array());
    }

    /**
     * Filtrar productos por nombre
     */
    public function actionSearchProductoNombre() {
        $producto = new Producto();
        $productoExcluido = null;
        $idprod = '';
        $idalm = '';
        if (isset($_POST['productoComplementario'])) {
            $productoExcluido = $this->getIdProducto($_POST['productoComplementario']);
        }
        if ($_POST['noidproducto'] !== '') {
            $idprod = SeguridadModule::dec($_POST['noidproducto']);
        }
        echo SGridView::widget('TGridViewList', array(
            'dataProvider' => $producto->searchProductoNombre($_POST['nombre'], $productoExcluido, $idprod, $idalm),
            'columns' => array(array('name' => 'id', 'typeCol' => 'hidden'),
                array('name' => 'codigo', 'width' => 10),
                array('name' => 'nombre', 'width' => 50),
                array('name' => 'almacen', 'value' => '$data->idalmacen0->nombre', 'width' => 10),
            ),
        ));
    }

    /**
     * Filtrar productos por codigo
     */
    public function actionSearchProductoCodigo() {
        $producto = new Producto();
        $productoExcluido = null;
        $idprod = '';
        $idalm = '';
        if (isset($_POST['productoComplementario'])) {
            $productoExcluido = $this->getIdProducto($_POST['productoComplementario']);
        }
        if ($_POST['noidproducto'] !== '') {
            $idprod = SeguridadModule::dec($_POST['noidproducto']);
        }
        echo SGridView::widget('TGridViewList', array(
            'dataProvider' => $producto->searchProductoCodigo($_POST['codigo'], $productoExcluido, $idprod, $idalm),
            'columns' => array(array('name' => 'id', 'typeCol' => 'hidden'),
                array('name' => 'codigo', 'width' => 10),
                array('name' => 'nombre', 'width' => 50),
                array('name' => 'almacen', 'value' => '$data->idalmacen0->nombre', 'width' => 10),
            ),
        ));
    }

    /**
     * Validar si es caracteristica padre, debe seleccionar un hijo
     *  OBLIGATORIAMENTE
     */
    public function actionValidarCantidad() {
        $productoNota = isset($_POST['Productonota']) ? $_POST['Productonota'] : array();
        $tabla = array();
        foreach ($productoNota as $fila) {
            if (Producto::model()->findByPK($fila['idproducto'])->saldo >= $fila['cantidad']) {
                $fila['validate'] = true;
            } else {
                $fila['validate'] = false;
            }
            $tabla[] = $fila;
        }
        echo SGridView::validate($tabla, array());
    }

    /**
     * Obtiene un array simple con los id de productos que contiene el modelo 
     * productoproducto
     * @param Productoproducto $Productoproducto
     * @return Array
     */
    public function getIdProducto($Productoproducto) {
        $idProducto = null;
        for ($i = 1; $i < count($Productoproducto) + 1; $i++) {
            $idProducto[] = ($Productoproducto[$i]['idcomplementario']);
        }
        return $idProducto;
    }

    /**
     * Funcion que carga la pantalla de asignacion de saldos y punto de pedido
     */
    public function actionAsignacionSaldos() {
        $model = new Producto('search');
        $model->unsetAttributes();  // clear any default values

        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);
        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Producto']))
            $model->attributes = $_GET['Producto'];

        $this->renderPartial('asignacionSaldos', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Funcion que actualiza los saldos y puntos de pedido del producto
     */
    public function actionActualizarSaldos() {
        if (isset($_POST['id'])) {
            $model = Producto::model()->findByPk($_POST['id']);
            $model->setScenario('actualizarSaldos');
            $model->stockminimo = str_replace(",", "", $_POST['stockminimo']);
            $model->stockmaximo = str_replace(",", "", $_POST['stockmaximo']);
            $model->puntopedido = str_replace(",", "", $_POST['puntopedido']);
            if ($model->save()) {
                self::actionAdmin();
            } else {
                echo System::messageError('No se actualizó correctamente!');
                return;
            }
        }
    }

    /**
     * Permite utilizar un autocomplete para la busqueda de productos para la
     * ventana del libro de almacenes, el nombre de producto concatenado a su
     * codigo, nombreCompletoProducto tiene como parametros de entrada el id del 
     * almacen al cual esta asociado el producto, y el termino que se busca
     */
    public function actionAutocompleteLibroMayor() {
        $idAlmacen = $_GET['idalmacen'];
        $request = trim($_GET['term']);
        $requestMayuscula = strtoupper($request);

        if ($request != '') {
            $criteria = new CDbCriteria;
            $criteria->select = 't.*';
            $criteria->condition = "t.eliminado=false and (t.nombre like :valorentrada or t.codigo like :valorentrada)";
            if ($idAlmacen !== '') {
                $criteria->addCondition("idalmacen= " . SeguridadModule::dec($idAlmacen));
            }
            $criteria->params = array(':valorentrada' => "%$requestMayuscula%");
            $criteria->order = "nombre asC";
            $criteria->limit = 10;
            $model = Producto::model()->findAll($criteria);
            $data = array();

            foreach ($model as $get) {
                $data[] = array(
                    'label' => $get->codigo . ' (' . $get->nombre . ')',
                    'value' => $get->codigo . ' (' . $get->nombre . ')',
                    'nombre' => $get->codigo . ' (' . $get->nombre . ')',
                    'id' => $get->id);
            }

            $this->layout = 'empty';
            echo CJSON::encode($data);
        }
    }

    /**
     * Funcion que carga la pantalla para seleccionar los productos para
     * inventariar
     */
    public function actionInventariarProducto() {
        $model = new Producto('inventariar');
        $model->unsetAttributes();  // clear any default values

        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);
        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        if (isset($_GET['Producto']))
            $model->attributes = $_GET['Producto'];

        $this->renderPartial('inventariar', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Función que cambia el estado de inventariar (true o false) 
     * de la tabla producto 
     * @param type $id    
     */
    public function actionInventariar() {
        $model = $this->loadModel(SeguridadModule::dec($_GET['id']));
        $model->setScenario('inventariar');
        $model->inventariar = $_GET['bandera'];
        if ($model->save()) {
            echo System::messageConfirm('');
            return;
        } else {
            echo System::messageConfirm('Error en el proceso');
            return;
        }
    }

}
