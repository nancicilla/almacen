<?php

class InventarioController extends Controller {
    /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */

    /*
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */

    public function filters() {
        return array_merge(
                array(
                    'accessControl',
                    array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
                )
        );
    }

    /*
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */

    private function _publicActionsList() {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',
        );
    }

    public function accessRules() {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false, 'bootbox.min.js' => false);
        $model = new Inventario;

        if (isset($_POST['Inventario'])) {
            $model->attributes = $_POST['Inventario'];

            if ($model->save()) {
                $model->aniadirProductosInventario($model->id, $_POST['Inventario']['idAlmacen']);
                echo System::dataReturn('', array('id' => SeguridadModule::enc($model->id)));
                return;
            } else {
                echo System::hasErrors('Error al crear! ', $model);
                return;
            }
        }

        $this->renderPartial('create', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = $this->loadModel(SeguridadModule::dec($id));
        if (Estado::model()->esEstadoInicio($model->idestado)) {

            $model = $this->loadModel(SeguridadModule::dec($id));

            if (isset($_POST['Inventario'])) {
                $model->attributes = $_POST['Inventario'];
                if ($model->save()) {
                    echo System::dataReturn('', array('id' => SeguridadModule::enc($model->id)));
                    return;
                } else {
                    echo System::hasErrors('Error al modificar! ', $model);
                    return;
                }
            }

            $this->renderPartial('update', array(
                'model' => $model,
                'productoInventario' => Productoinventario::model()->obtenerProductoinventario(SeguridadModule::dec($id)),
                    ), false, true);
        }
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        $this->loadModel(SeguridadModule::dec($id))->delete();
        self::actionAdmin();
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        Yii::app()->getClientScript()->scriptMap = array('jquery.js' => false, 'jquery.ui.js' => false, 'jquery-ui.min.js' => false);

        $model = new Inventario('search');
        $model->unsetAttributes();  // clear any default values

        if (isset($_GET['Inventario']))
            $model->attributes = $_GET['Inventario'];

        if (isset($_GET['pageSize'])) {
            Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);
        } else {
            Yii::app()->user->setState('pageSize', Yii::app()->params['defaultPageSize']);
        }

        $this->renderPartial('admin', array(
            'model' => $model,
                ), false, true);
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Inventario the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        $model = Inventario::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param Inventario $model the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'inventario-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    /**
     * Genera el reporte en formato pdf del inventario, en caso de contener 
     * paginas se muestra una excepción
     */
    public function actionReporteInventario($id) {
        $re = new JasperReport('/reports/Almacen/inventario', JasperReport::FORMAT_PDF, array(
            'pId' => SeguridadModule::dec($id),
            'pUsuario' => Yii::app()->user->getName(),
            'pFormatoNumero' => Yii::app()->params['formatNumberAlm'],
            'REPORT_LOCALE' => Yii::app()->params['appLocale'],
        ));

        $re->exec();

        if ($re->getPages() > 0) {
            echo $re->toPDF();
        } else {
            throw new CrugeException('El reporte no tiene páginas.', 483);
        }
    }

    /**
     * Cierra el inventario para evitar su edición
     * @param integer $id el id del modelo a ser cerrado
     */
    public function actionCerrar($id) {
        $aux = $this->loadModel(SeguridadModule::dec($id))->cerrarInventario();
        if ($aux !== 'exito') {
            echo $aux;
        }
    }

    /**
     * Reabre un inventario previamente cerrado para habilitar su edición
     * @param integer $id el id del modelo a ser reabierto
     */
    public function actionReabrir($id) {
        $aux = $this->loadModel(SeguridadModule::dec($id))->reabrirInventario();
        if ($aux !== 'exito') {
            echo $aux;
        }
    }

    /**
     * Anula un inventario
     * @param integer $id el id del modelo a ser anulado
     */
    public function actionAnular($id) {
        $aux = $this->loadModel(SeguridadModule::dec($id))->anularInventario();
        if ($aux !== 'exito') {
            echo $aux;
        }
    }

    /**
     * Confirma las diferencias de inventario y genera las notas de ingreso
     * y salida correspondientes
     * @param integer $id el id del inventario a confirmarse
     */
    public function actionConfirmar($id) {
        $aux = $this->loadModel(SeguridadModule::dec($id))->confirmarDiferenciasInventario();
        if ($aux !== 'exito') {
            echo $aux;
        }
    }

    /**
     * Invoca al metodo del modelo Productoinventario que actualiza el saldo de 
     * un determinado producto, se reciben los parametros por get a partir de la
     * función Inventario.actualizarSaldo en inventario.js 
     */
    public function actionActualizarSaldo() {
        if ($_GET['saldo'] != null) {
            $saldo = $_GET['saldo'];
        } else {
            $saldo = 0;
        }
        Productoinventario::model()->actualizarSaldo($_GET['idproducto'], SeguridadModule::dec($_GET['idinventario']), $saldo);
    }

}
