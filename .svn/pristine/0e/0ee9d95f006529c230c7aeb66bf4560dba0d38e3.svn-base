<?php

class ProductonotaController extends Controller
{
	 /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */
    
    /* 
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */
   
    public function filters()
    {
        return array_merge(
            array(
                'accessControl',
                array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
            )
        );
    } 
    
    /* 
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */
    private function _publicActionsList()
    {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',          
        );
    }
    
    public function accessRules()
    {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{
		$dataProvider=new CActiveDataProvider('Productonota');
		$this->render('index',array(
			'dataProvider'=>$dataProvider,
		));
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
		$model=new Productonota('search');
//		$model->unsetAttributes();  // clear any default values
                Yii::app()->user->setState('pageSize',Yii::app()->params['defaultPageSize']);

                if (isset($_GET['pageSize'])) {
                    Yii::app()->user->setState('pageSize',(int)$_GET['pageSize']);   
                    unset($_GET['pageSize']);  
                }
		if(isset($_GET['Productonota']))
			$model->attributes=$_GET['Productonota'];
                
                if(!$model->validate()){                     
                    $errors = '';    
                    foreach($model->attributeNames() as $attr)
                    {
                        $errors .= $model->hasErrors($attr) ? $model->getError($attr).' ' : '';
                    }
                    $errors .= $model->hasErrors('fechaInicio') ? $model->getError('fechaInicio').' ' : '';
                    $errors .= $model->hasErrors('fechaFin') ? $model->getError('fechaFin').' ' : '';
                    $errors .= $model->hasErrors('notaNumero') ? $model->getError('notaNumero').' ' : '';

                    Yii::app()->user->setFlash('error', $errors);          
                }
                
		$this->render('admin',array(
			'model'=>$model,
		));
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer $id the ID of the model to be loaded
	 * @return Productonota the loaded model
	 * @throws CHttpException
	 */
	public function loadModel($id)
	{
		$model=Productonota::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param Productonota $model the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='productonota-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}
        
    /**
     * Genera el reporte en formato pdf del kardex de producto en base a la 
     * vista del cgridview de la interfaz de kardex,  en caso de que el reporte
     * no tenga paginas se muestra una excepción
     */ 
  
    public function actionReporteKardex()
    {  
            if (Yii::app()->session['productonotamodel']->fechaInicio==null){
                $fechaInicio=  Gestion::getFechaInicioGestion();
            }
            else{
                $fechaInicio= Yii::app()->session['productonotamodel']->fechaInicio;
            }
            if (Yii::app()->session['productonotamodel']->fechaFin==null){            
                 $fechaFin=date('Y-m-d');
            }
            else{
                $fechaFin= Yii::app()->session['productonotamodel']->fechaFin;
            }
            $re = new JasperReport('/reports/Almacen/productoKardex', JasperReport::FORMAT_PDF, array(
                'pIds' => SWUtil::aRtoArrayReport(Yii::app()->session['productonotareportekardex'], 'idyii'),
                'pUsuario'=>Yii::app()->user->getName(),    
                'pFechaInicio'=>Yii::app()->format->date(strtotime($fechaInicio)),
                'pFechaFin'=>Yii::app()->format->date(strtotime($fechaFin)),                
                'pFormatoNumero'=>Yii::app()->params['formatNumberAlm'],
                'REPORT_LOCALE'=>Yii::app()->params['appLocale'],
            ));

            $re->exec();
        
            if ($re->getPages()>0 && Yii::app()->session['mostrarReporteKardex'] ){
                echo $re->toPDF();
            }
            else
                {
                throw new CrugeException('El reporte no tiene páginas.',483);
            }           
    }
}
