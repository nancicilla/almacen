<?php

class ProductoinventarioController extends Controller
{
	 /*
     * IMPORTANTE!!!
     * Los métodos filters(),_publicActionsList() y accessRules() deben copiarse
     * tal cual en todos los controladores del proyecto
     */
    
    /* 
     * se debe usar este método filters en todos los controladores para permitir
     * filtrar si el usuario tiene acceso a las acciones y controlador o no, 
     */
   
    public function filters()
    {
        return array_merge(
            array(
                'accessControl',
                array('CrugeUiAccessControlFilter', 'publicActions' => self::_publicActionsList()),
            )
        );
    } 
    
    /* 
     * en este array deben ir las acciones publicas del modulo, las que se 
     * pueden acceder sin necesitar permisos, por defecto todas las acciones
     * se acceden solo con autorizacion, por eso el array no tiene acciones
     */
    private function _publicActionsList()
    {
        //en este array deben ir las acciones publicas del modulo, las que se 
        //pueden acceder sin necesitar permisos, por defecto todas las acciones
        //se acceden solo con autorizacion, por eso el array no tiene acciones
        return array(
            '',          
        );
    }
    
    public function accessRules()
    {
        return array(
            array(
                'allow',
                'actions' => self::_publicActionsList(),
                'users' => array('*'),
            ),
            array(
                'allow',
                'users' => array('@'),
            ),
            array(
                'deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

	
	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{
		$dataProvider=new CActiveDataProvider('Productoinventario');
		$this->render('index',array(
			'dataProvider'=>$dataProvider,
		));
	}

	
         /**
	 * 
	 */
	public function actionLlenarInventario($idinventario)
	{
		$model=new Productoinventario('mostrarProductos');
		$model->unsetAttributes();  // clear any default values
                Yii::app()->user->setState('pageSize',Yii::app()->params['defaultPageSize']);
                
                if (isset($_GET['pageSize'])) {
                     Yii::app()->user->setState('pageSize',(int)$_GET['pageSize']);   
                     unset($_GET['pageSize']);  
                }
		if(isset($_GET['Productoinventario']))
			$model->attributes=$_GET['Productoinventario'];
                        $model->idinventario=SeguridadModule::dec($idinventario);
		$this->render('llenadoInventario',array(
			'model'=>$model,
		));
	}
        
        public function actionModificarSaldo(){
            //( 'idproducto','idinventario'); orden de $keyvalue
            //primary key en el modelo
            if ($_POST["new_value"]!==""){ 
            $model=new Productoinventario();
            $keyvalue   = $_POST["keyvalue"];   //(idproducto|idinventario)
            $datos =$keyvalue;
            list($idproducto, $idinventario) = explode("|", $datos);
            $model->actualizarSaldo($idproducto,$idinventario,str_replace(',', '', $_POST["new_value"]));
            echo $_POST["new_value"];    
            }
            else{
                echo $_POST["old_value"];
            }
    }
}
