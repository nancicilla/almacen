<?php

/**
 * This is the model class for table "almacenproducto".
 *
 * The followings are the available columns in table 'almacenproducto':
 * @property string $stockminimo
 * @property string $stockreposicion
 * @property string $stockmaximo
 * @property string $fecha
 * @property boolean $eliminado
 * @property string $usuario
 * @property integer $idalmacen
 * @property integer $idproducto
 * @property string $saldo
 *
 * The followings are the available model relations:
 * @property Almacen $idalmacen0
 * @property Producto $idproducto0
 * @property Almacenproductonota[] $almacenproductonotas
 * @property Almacenproductonota[] $almacenproductonotas1
 */
class Almacenproducto extends CActiveRecord {

    public function primaryKey() {
        return array('idalmacen', 'idproducto');
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'almacenproducto';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('fecha, idalmacen, idproducto', 'required', 'on' => array('insert', 'update')),
            array('idalmacen, idproducto', 'numerical', 'integerOnly' => true),
            array('usuario', 'length', 'max' => 30),
            array('stockminimo, stockreposicion, stockmaximo, eliminado, saldo', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('stockminimo, stockreposicion, stockmaximo, fecha, eliminado, usuario, idalmacen, idproducto', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'idalmacen0' => array(self::BELONGS_TO, 'Almacen', 'idalmacen'),
            'idproducto0' => array(self::BELONGS_TO, 'Producto', 'idproducto'),
            'almacenproductonotas' => array(self::HAS_MANY, 'Almacenproductonota', 'idproducto'),
            'almacenproductonotas1' => array(self::HAS_MANY, 'Almacenproductonota', 'idalmacen'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'stockminimo' => 'Stockminimo',
            'stockreposicion' => 'Stockreposicion',
            'stockmaximo' => 'Stockmaximo',
            'fecha' => 'Fecha',
            'eliminado' => 'Eliminado',
            'usuario' => 'Usuario',
            'idalmacen' => 'Idalmacen',
            'idproducto' => 'Idproducto',
            'saldo' => 'Saldo',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('stockminimo', $this->stockminimo, true);
        $criteria->compare('stockreposicion', $this->stockreposicion, true);
        $criteria->compare('stockmaximo', $this->stockmaximo, true);
        if ($this->fecha != Null) {
            $criteria->addCondition("fecha::date = '" . $this->fecha . "'");
        }
        $criteria->compare('t.eliminado', 0);
        $criteria->compare('usuario', $this->usuario, true);
        $criteria->compare('idalmacen', $this->idalmacen);
        $criteria->compare('idproducto', $this->idproducto);
        $criteria->compare('saldo', $this->saldo, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection() {
        return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Almacenproducto the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayÃºsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->fecha = new CDbExpression('NOW()');
        $this->usuario = Yii::app()->user->getName();
        return parent::beforeSave();
    }

}
