<?php
/*
 * Vigencia.php
 *
 * Version 0.$Rev: 244 $
 *
 * Creacion: 08/10/2015
 *
 * Ultima Actualizacion: $Date: 2015-03-17 10:26:19 -0400 (mar, 17 mar 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 
 * This is the model class for table "vigencia".
 *
 * The followings are the available columns in table 'vigencia':
 * @property integer $id
 * @property integer $idalmacen
 * @property string $fechainicio
 * @property string $fechafin
 * @property string $usuarioinicio
 * @property string $usuariofin
 * @property boolean $eliminado
 */
class Vigencia extends CActiveRecord
{
    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
            return 'vigencia';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
            // NOTE: you should only define rules for those attributes that
            // will receive user inputs.
            return array(
                    array('idalmacen', 'required', 'on' => array('insert, update')),
                    array('idalmacen', 'numerical', 'integerOnly'=>true),
                    array('usuarioinicio, usuariofin', 'length', 'max'=>30),
                    array('fechainicio, fechafin, eliminado', 'safe'),
                    // The following rule is used by search().
                    // @todo Please remove those attributes that should not be searched.
                    array('id, idalmacen, fechainicio, fechafin, usuarioinicio, usuariofin, eliminado', 'safe', 'on'=>'search'),
            );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
            // NOTE: you may need to adjust the relation name and the related
            // class name for the relations automatically generated below.
            return array(
                'almacen0' => array(self::BELONGS_TO, 'Almacen', 'idalmacen'),
            );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
            return array(
                    'id' => 'ID',
                    'idalmacen' => 'Almacén',
                    'fechainicio' => 'Fecha Inicio',
                    'fechafin' => 'Fecha Fin',
                    'usuarioinicio' => 'Usuario Inicio',
                    'usuariofin' => 'Usuario Fin',
                    'eliminado' => 'Eliminado',
            );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria=new CDbCriteria;
        $criteria->with = array('almacen0');
            
        $criteria->compare('t.id',$this->id);
        $criteria->compare('t.idalmacen',$this->idalmacen);
         if ($this->fechainicio != Null) {
        $criteria->addCondition("t.fechainicio::date = '" . $this->fechainicio. "'");
         }
         if ($this->fechafin != Null) {
        $criteria->addCondition("t.fechafin::date = '" . $this->fechafin. "'");
         }
        $criteria->addSearchCondition('t.usuarioinicio',$this->usuarioinicio,true,'AND','ILIKE');
        $criteria->addSearchCondition('t.usuariofin',$this->usuariofin,true,'AND','ILIKE');

    return new CActiveDataProvider($this, array(
            'pagination'=>array(
                'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),
            ), 
            'criteria'=>$criteria,
            'sort' => array(
                'defaultOrder' => 't.id desc',
                'attributes' => array(
                    'idalmacen' => array(
                        'asc' => 'almacen0.nombre',
                        'desc' => 'almacen0.nombre DESC',
                    ),
                    '*',
                )
            ),
    ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection()
    {
            return Yii::app()->almacen;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Vigencia the static model class
     */
    public static function model($className=__CLASS__)
    {
            return parent::model($className);
    }


    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
        $this->usuarioinicio = Yii::app()->user->getName();
        //$this->usuariofin = strtoupper($this->usuariofin);
        return parent::beforeSave();            
    }


}
